{"version":3,"sources":["../../../../../src/tree/structure/nodes/List.js"],"names":["ListItem","Node","List","constructor","ordered","children","appendChild","child","console","warn","push"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA;;;;;;;AAOA,MAAMC,IAAN,SAAmBD,IAAnB,CAAwB;AACvB;;;;;;;AAOAE,aAAaC,OAAb,EAAuB;AACtB,QAAO,MAAP;AACA;;;;AAIA,OAAKA,OAAL,GAAeA,OAAf;AACA;;;;AAIA,OAAKC,QAAL,GAAgB,EAAhB;AACA;;AAED;;;;;;AAMAC,aAAaC,KAAb,EAAqB;AACpB,MAAK,EAAIA,iBAAiBP,QAArB,CAAL,EAAuC;AACtCQ,WAAQC,IAAR,CAAc,gCAAd;AACA;AACD,OAAKJ,QAAL,CAAcK,IAAd,CAAoBH,KAApB;AACA;AAjCsB;AAmCxB,eAAeL,IAAf","file":"List.js","sourcesContent":["import ListItem from \"./ListItem\";\nimport Node from \"./Node\";\n/**\n * Represents a list of items.\n *\n * @extends module:tree/structure.Node\n *\n * @memberOf module:tree/structure\n */\nclass List extends Node {\n\t/**\n\t * Represents a list of items.\n\t *\n\t * @param {boolean} ordered Whether the list is ordered or not.\n\t *\n\t * @returns {void}\n\t */\n\tconstructor( ordered ) {\n\t\tsuper( \"List\" );\n\t\t/**\n\t\t * If this list is ordered.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.ordered = ordered;\n\t\t/**\n\t\t * This node's children (should only be list items).\n\t\t * @type {ListItem[]}\n\t\t */\n\t\tthis.children = [];\n\t}\n\n\t/**\n\t * Appends the child to this List's children.\n\t *\n\t * @param {ListItem} child The child to add.\n\t * @returns {void}\n\t */\n\tappendChild( child ) {\n\t\tif ( ! ( child instanceof ListItem ) ) {\n\t\t\tconsole.warn( \"Added child is not a ListItem!\" );\n\t\t}\n\t\tthis.children.push( child );\n\t}\n}\nexport default List;\n"]}