{"version":3,"sources":["../../../../../src/tree/structure/nodes/LeafNode.js"],"names":["TextContainer","Node","LeafNode","constructor","type","textContainer","text"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,kBAA1B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA;;;;;;;;;;AAUA,MAAMC,QAAN,SAAuBD,IAAvB,CAA4B;AAC3B;;;;;;;AAOAE,aAAaC,IAAb,EAAoB;AACnB,QAAOA,IAAP;AACA;;;;AAIA,OAAKC,aAAL,GAAqB,IAAIL,aAAJ,EAArB;AACA;;AAED;;;;;AAKA,KAAIM,IAAJ,GAAW;AACV,SAAO,KAAKD,aAAL,CAAmBC,IAA1B;AACA;;AAED;;;;;;;AAOA,KAAIA,IAAJ,CAAUA,IAAV,EAAiB;AAChB,OAAKD,aAAL,CAAmBC,IAAnB,GAA0BA,IAA1B;AACA;AAnC0B;;AAsC5B,eAAeJ,QAAf","file":"LeafNode.js","sourcesContent":["import TextContainer from \"../TextContainer\";\nimport Node from \"./Node\";\n/**\n * A node at the end of the tree that may only contain formatting elements,\n * these include headings and paragraphs.\n *\n * @extends module:tree/structure.Node\n *\n * @memberOf module:tree/structure\n *\n * @abstract\n */\nclass LeafNode extends Node {\n\t/**\n\t * Creates a new leaf node.\n\t *\n\t * @param {string} type The type of Node (should be unique for each child class of Node).\n\t *\n\t * @returns {void}\n\t */\n\tconstructor( type ) {\n\t\tsuper( type );\n\t\t/**\n\t\t * A container for keeping this leaf node's text.\n\t\t * @type {module:tree/structure.TextContainer}\n\t\t */\n\t\tthis.textContainer = new TextContainer();\n\t}\n\n\t/**\n\t * Retrieves the heading text (from the TextContainer).\n\t *\n\t * @returns {string} The text of the heading.\n\t */\n\tget text() {\n\t\treturn this.textContainer.text;\n\t}\n\n\t/**\n\t * Sets the heading text (via the TextContainer).\n\t *\n\t * @param {string} text The text to assign as the heading text.\n\t *\n\t * @returns {void}\n\t */\n\tset text( text ) {\n\t\tthis.textContainer.text = text;\n\t}\n}\n\nexport default LeafNode;\n"]}