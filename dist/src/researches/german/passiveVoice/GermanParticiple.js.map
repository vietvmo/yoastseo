{"version":3,"sources":["../../../../../src/researches/german/passiveVoice/GermanParticiple.js"],"names":["Participle","getIndicesByWord","getIndices","getIndicesByWordList","getIndicesOfList","exceptionsParticiplesActiveFactory","exceptionsParticiplesActive","auxiliariesFactory","auxiliaries","participleLike","exceptionsRegex","includes","map","GermanParticiple","participle","sentencePart","attributes","call","setSentencePartPassiveness","isPassive","require","inherits","prototype","hasNounSuffix","isInExceptionList","hasHabenSeinException","isAuxiliary","getParticiple","match","participleIndices","getSentencePart","habenSeinIndices","length","currentParticiple","index"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,+BAAvB;AACA,SAASC,oBAAoBC,UAA7B,QAA+C,sCAA/C;AACA,SAASC,wBAAwBC,gBAAjC,QAAyD,sCAAzD;AACA,OAAOC,kCAAP,MAA+C,kCAA/C;AACA,MAAMC,8BAA8BD,oCAApC;;AAEA,OAAOE,kBAAP,MAA+B,kBAA/B;AACA,IAAIC,cAAcD,qBAAqBE,cAAvC;;AAEA,IAAIC,kBACH,4HADD;;AAGA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,GAAT,QAAoB,WAApB;;AAEA;;;;;;;;;AASA,IAAIC,mBAAmB,UAAWC,UAAX,EAAuBC,YAAvB,EAAqCC,UAArC,EAAkD;AACxEhB,aAAWiB,IAAX,CAAiB,IAAjB,EAAuBH,UAAvB,EAAmCC,YAAnC,EAAiDC,UAAjD;AACA,OAAKE,0BAAL,CAAiC,KAAKC,SAAL,EAAjC;AACA,CAHD;;AAKAC,QAAS,MAAT,EAAkBC,QAAlB,CAA4BR,gBAA5B,EAA8Cb,UAA9C;;AAEA;;;;;AAKAa,iBAAiBS,SAAjB,CAA2BH,SAA3B,GAAuC,YAAW;AACjD,SAAQ,CAAE,KAAKI,aAAL,EAAF,IACL,CAAE,KAAKC,iBAAL,EADG,IAEL,CAAE,KAAKC,qBAAL,EAFG,IAGL,CAAE,KAAKC,WAAL,EAHL;AAIA,CALD;;AAOA;;;;;;AAMAb,iBAAiBS,SAAjB,CAA2BE,iBAA3B,GAA+C,YAAW;AACzD,SAAOb,SAAUL,2BAAV,EAAuC,KAAKqB,aAAL,EAAvC,CAAP;AACA,CAFD;;AAIA;;;;;;AAMAd,iBAAiBS,SAAjB,CAA2BC,aAA3B,GAA2C,YAAW;AACrD,SAAO,KAAKI,aAAL,GAAqBC,KAArB,CAA4BlB,eAA5B,MAAkD,IAAzD;AACA,CAFD;;AAIA;;;;;;AAMAG,iBAAiBS,SAAjB,CAA2BG,qBAA3B,GAAmD,YAAW;AAC7D,MAAII,oBAAoB3B,WAAY,KAAKyB,aAAL,EAAZ,EAAkC,KAAKG,eAAL,EAAlC,CAAxB;AACA,MAAIC,mBAAmB3B,iBAAkB,CAAE,OAAF,EAAW,MAAX,CAAlB,EAAuC,KAAK0B,eAAL,EAAvC,CAAvB;AACA,MAAKD,kBAAkBG,MAAlB,GAA2B,CAA3B,IAAgCD,iBAAiBC,MAAjB,KAA4B,CAAjE,EAAqE;AACpE,WAAO,KAAP;AACA;AACDD,qBAAmBnB,IAAKmB,gBAAL,EAAuB,OAAvB,CAAnB;AACA,MAAIE,oBAAoBJ,kBAAmB,CAAnB,CAAxB;AACA,SAAOlB,SAAUoB,gBAAV,EAA4BE,kBAAkBC,KAAlB,GAA0BD,kBAAkBL,KAAlB,CAAwBI,MAAlD,GAA2D,CAAvF,CAAP;AACA,CATD;;AAWA;;;;;;AAMAnB,iBAAiBS,SAAjB,CAA2BI,WAA3B,GAAyC,YAAW;AACnD,SAAOf,SAAUH,WAAV,EAAuB,KAAKmB,aAAL,EAAvB,CAAP;AACA,CAFD;;AAKA,eAAed,gBAAf","file":"GermanParticiple.js","sourcesContent":["import Participle from \"../../../values/Participle.js\";\nimport { getIndicesByWord as getIndices } from \"../../../stringProcessing/indices.js\";\nimport { getIndicesByWordList as getIndicesOfList } from \"../../../stringProcessing/indices.js\";\nimport exceptionsParticiplesActiveFactory from \"./exceptionsParticiplesActive.js\";\nconst exceptionsParticiplesActive = exceptionsParticiplesActiveFactory();\n\nimport auxiliariesFactory from \"./auxiliaries.js\";\nvar auxiliaries = auxiliariesFactory().participleLike;\n\nvar exceptionsRegex =\n\t/\\S+(apparat|arbeit|dienst|haft|halt|keit|kraft|not|pflicht|schaft|schrift|tät|wert|zeit)($|[ \\n\\r\\t.,'()\"+-;!?:/»«‹›<>])/ig;\n\nimport { includes } from \"lodash-es\";\nimport { map } from \"lodash-es\";\n\n/**\n * Creates an Participle object for the German language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {object} attributes  The attributes object.\n *\n * @constructor\n */\nvar GermanParticiple = function(  participle, sentencePart, attributes ) {\n\tParticiple.call( this, participle, sentencePart, attributes );\n\tthis.setSentencePartPassiveness( this.isPassive() );\n};\n\nrequire( \"util\" ).inherits( GermanParticiple, Participle );\n\n/**\n * Checks if the text is passive based on the participle exceptions.\n *\n * @returns {boolean} Returns true if there is no exception, and the sentence is passive.\n */\nGermanParticiple.prototype.isPassive = function() {\n\treturn \t! this.hasNounSuffix() &&\n\t\t\t\t! this.isInExceptionList() &&\n\t\t\t\t! this.hasHabenSeinException() &&\n\t\t\t\t! this.isAuxiliary();\n};\n\n/**\n * Checks whether a found participle is in the exception list.\n * If a word is in the exceptionsParticiplesActive list, it isn't a participle.\n *\n * @returns {boolean} Returns true if it is in the exception list, otherwise returns false.\n */\nGermanParticiple.prototype.isInExceptionList = function() {\n\treturn includes( exceptionsParticiplesActive, this.getParticiple() );\n};\n\n/**\n * Checks whether a found participle ends in a noun suffix.\n * If a word ends in a noun suffix from the exceptionsRegex, it isn't a participle.\n *\n * @returns {boolean} Returns true if it ends in a noun suffix, otherwise returns false.\n */\nGermanParticiple.prototype.hasNounSuffix = function() {\n\treturn this.getParticiple().match( exceptionsRegex ) !== null;\n};\n\n/**\n * Checks whether a participle is followed by 'haben' or 'sein'.\n * If a participle is followed by one of these, the sentence is not passive.\n *\n * @returns {boolean} Returns true if it is an exception, otherwise returns false.\n */\nGermanParticiple.prototype.hasHabenSeinException = function() {\n\tvar participleIndices = getIndices( this.getParticiple(), this.getSentencePart() );\n\tvar habenSeinIndices = getIndicesOfList( [ \"haben\", \"sein\" ], this.getSentencePart() );\n\tif ( participleIndices.length > 0 && habenSeinIndices.length === 0 ) {\n\t\treturn false;\n\t}\n\thabenSeinIndices = map( habenSeinIndices, \"index\" );\n\tvar currentParticiple = participleIndices[ 0 ];\n\treturn includes( habenSeinIndices, currentParticiple.index + currentParticiple.match.length + 1 );\n};\n\n/**\n * Checks whether a found participle is an auxiliary.\n * If a word is an auxiliary, it isn't a participle.\n *\n * @returns {boolean} Returns true if it is an auxiliary, otherwise returns false.\n */\nGermanParticiple.prototype.isAuxiliary = function() {\n\treturn includes( auxiliaries, this.getParticiple() );\n};\n\n\nexport default GermanParticiple;\n"]}