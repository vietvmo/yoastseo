{"version":3,"sources":["../../../../../src/researches/passiveVoice/morphological/determinePassiveSentence.js"],"names":["filter","getWords","getPassiveVerbsRussianFactory","getPassiveVerbsRussian","all","getPassiveVerbsSwedishFactory","getPassiveVerbsSwedish","matchPassiveVerbs","sentence","passiveVerbs","word","includes","toLocaleLowerCase","determineSentenceIsPassive","language","length","sentenceText"],"mappings":"AAAA,SAASA,MAAT,QAAuB,WAAvB;AACA,OAAOC,QAAP,MAAqB,uCAArB;;AAEA;AACA,OAAOC,6BAAP,MAA0C,wDAA1C;AACA,MAAMC,yBAAyBD,gCAAgCE,GAA/D;;AAEA,OAAOC,6BAAP,MAA0C,2CAA1C;AACA,MAAMC,yBAAyBD,gCAAgCD,GAA/D;;AAEA;;;;;;;AAOA,MAAMG,oBAAoB,UAAUC,QAAV,EAAoBC,YAApB,EAAmC;AAC5D,SAAOT,OAAQC,SAAUO,QAAV,CAAR,EAA8B,UAAUE,IAAV,EAAiB;AACrD,WAAOD,aAAaE,QAAb,CAAuBD,KAAKE,iBAAL,EAAvB,CAAP;AACA,GAFM,CAAP;AAGA,CAJD;;AAMA;;;;;;;AAOA,MAAMC,6BAA6B,UAAUL,QAAV,EAAoBM,QAApB,EAA+B;AACjE,MAAIL,eAAe,EAAnB;;AAEA,UAASK,QAAT;AACC,SAAK,IAAL;AACCL,qBAAeN,sBAAf;AACA;AACD,SAAK,IAAL;AACCM,qBAAeH,sBAAf;AACA;AANF;AAQA,SAAOC,kBAAmBC,QAAnB,EAA6BC,YAA7B,EAA4CM,MAA5C,KAAuD,CAA9D;AACA,CAZD;;AAcA;;;;;;;;AAQA,eAAe,UAAUC,YAAV,EAAwBF,QAAxB,EAAmC;AACjD,SAAOD,2BAA4BG,YAA5B,EAA0CF,QAA1C,CAAP;AACA","file":"determinePassiveSentence.js","sourcesContent":["import { filter } from \"lodash-es\";\nimport getWords from \"../../../stringProcessing/getWords.js\";\n\n// Verb-form lists per language\nimport getPassiveVerbsRussianFactory from \"../../russian/passiveVoice/participlesShortenedList.js\";\nconst getPassiveVerbsRussian = getPassiveVerbsRussianFactory().all;\n\nimport getPassiveVerbsSwedishFactory from \"../../swedish/passiveVoice/participles.js\";\nconst getPassiveVerbsSwedish = getPassiveVerbsSwedishFactory().all;\n\n/**\n * Matches the sentence against passive verbs.\n *\n * @param {string} sentence The sentence to match against.\n * @param {Array} passiveVerbs The array containing passive verb-forms.\n * @returns {Array} The found passive verbs.\n */\nconst matchPassiveVerbs = function( sentence, passiveVerbs ) {\n\treturn filter( getWords( sentence ), function( word ) {\n\t\treturn passiveVerbs.includes( word.toLocaleLowerCase() );\n\t} );\n};\n\n/**\n * Checks the passed sentences to see if they contain passive verb-forms.\n *\n * @param {string} sentence The sentence to match against.\n * @param {string} language The language of the text.\n * @returns {Array} The list of encountered passive verbs.\n */\nconst determineSentenceIsPassive = function( sentence, language ) {\n\tlet passiveVerbs = [];\n\n\tswitch ( language ) {\n\t\tcase \"ru\":\n\t\t\tpassiveVerbs = getPassiveVerbsRussian;\n\t\t\tbreak;\n\t\tcase \"sv\":\n\t\t\tpassiveVerbs = getPassiveVerbsSwedish;\n\t\t\tbreak;\n\t}\n\treturn matchPassiveVerbs( sentence, passiveVerbs ).length !== 0;\n};\n\n/**\n * Determines whether a sentence is passive.\n *\n * @param {string} sentenceText The sentence to determine voice for.\n * @param {string} language The language of the sentence part.\n\n * @returns {boolean} Returns true if passive, otherwise returns false.\n */\nexport default function( sentenceText, language ) {\n\treturn determineSentenceIsPassive( sentenceText, language );\n}\n"]}