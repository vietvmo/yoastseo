{"version":3,"sources":["../../../../../src/researches/passiveVoice/periphrastic/matchParticiples.js"],"names":["find","forEach","memoize","includes","flattenDeep","irregularsEnglishFactory","irregularsEnglish","irregularsFrenchFactory","irregularsFrench","irregularsRegularFrench","irregularsRegular","irregularsIrregularFrench","irregularsIrregular","irregularsEndingInSFrench","irregularsEndingInS","spanishParticiplesFactory","spanishParticiples","italianParticiplesFactory","italianParticiples","irregularsDutchFactory","irregularsDutch","nlRegex1","nlRegex2","polishParticiplesFactory","polishParticiples","languageVariables","en","regularParticiplesRegex","fr","nl","regularParticipleRegexPattern1","regularParticipleRegexPattern2","regularParticiples","word","language","matches","Object","keys","regex","match","push","matchFrenchParticipleWithSuffix","irregulars","suffixes","irregular","irregularParticiplesRegex","RegExp","participleMatch","irregularParticiples","concat","irregularParticiple"],"mappings":"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","file":"matchParticiples.js","sourcesContent":["import { find } from \"lodash-es\";\nimport { forEach } from \"lodash-es\";\nimport { memoize } from \"lodash-es\";\nimport { includes } from \"lodash-es\";\nimport { flattenDeep } from \"lodash-es\";\n\nimport irregularsEnglishFactory from \"../../english/passiveVoice/irregulars\";\nconst irregularsEnglish = irregularsEnglishFactory();\n\nimport irregularsFrenchFactory from \"../../french/passiveVoice/irregulars\";\n\nconst irregularsFrench = irregularsFrenchFactory();\n\nconst irregularsRegularFrench = irregularsFrench.irregularsRegular;\nconst irregularsIrregularFrench = irregularsFrench.irregularsIrregular;\nconst irregularsEndingInSFrench = irregularsFrench.irregularsEndingInS;\n\nimport spanishParticiplesFactory from \"../../spanish/passiveVoice/participles\";\nconst spanishParticiples = spanishParticiplesFactory();\nimport italianParticiplesFactory from \"../../italian/passiveVoice/participles\";\nconst italianParticiples = italianParticiplesFactory();\nimport irregularsDutchFactory from \"../../dutch/passiveVoice/irregulars\";\nconst irregularsDutch = irregularsDutchFactory();\nconst nlRegex1 = /^(ge|be|ont|ver|her|er)\\S+(d|t)$/ig;\nconst nlRegex2 = /^(aan|af|bij|binnen|los|mee|na|neer|om|onder|samen|terug|tegen|toe|uit|vast)(ge)\\S+(d|t|n)$/ig;\nimport polishParticiplesFactory from \"../../polish/passiveVoice/participles\";\nconst polishParticiples = polishParticiplesFactory();\n\n\n// The language-specific participle regexes.\nconst languageVariables = {\n\ten: {\n\t\tregularParticiplesRegex: /\\w+ed($|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>])/ig,\n\t},\n\tfr: {\n\t\tregularParticiplesRegex: /\\S+(é|ée|és|ées)($|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>])/ig,\n\t},\n\tnl: {\n\t\tregularParticipleRegexPattern1: nlRegex1,\n\t\tregularParticipleRegexPattern2: nlRegex2,\n\t},\n};\n\n/**\n * Returns words that have been determined to be a regular participle.\n *\n * @param {string} word The word to check.\n * @param {string} language The language in which to match.\n *\n * @returns {Array} A list with the matches.\n */\nconst regularParticiples = function( word, language ) {\n\t// In Spanish, Italian and Polish we don't match participles with a regular regex pattern.\n\tif ( ( language === \"es\" ) || ( language === \"it\" ) || ( language === \"pl\" )  ) {\n\t\treturn [];\n\t}\n\n\t// Matches word with language-specific participle regexes.\n\tlet matches = [];\n\n\tObject.keys( languageVariables[ language ] ).forEach( function( regex ) {\n\t\tconst match = word.match( languageVariables[ language ][ regex ] );\n\t\tif ( match !== null ) {\n\t\t\tmatches.push( match );\n\t\t}\n\t} );\n\n\tmatches = flattenDeep( matches );\n\n\treturn matches;\n};\n\n/**\n * Returns an array of matches of irregular participles with suffixes.\n *\n * @param {string} word The word to match on.\n * @param {Array} irregulars The list of irregulars to match.\n * @param {string} suffixes The suffixes to match the word with.\n *\n * @returns {Array} A list with matched irregular participles.\n */\nconst matchFrenchParticipleWithSuffix = function( word, irregulars, suffixes ) {\n\tconst matches = [];\n\tforEach( irregulars, function( irregular ) {\n\t\tconst irregularParticiplesRegex = new RegExp( \"^\" + irregular + suffixes + \"?$\", \"ig\" );\n\t\tconst participleMatch = word.match( irregularParticiplesRegex );\n\t\tif ( participleMatch ) {\n\t\t\tmatches.push( participleMatch[ 0 ] );\n\t\t}\n\t} );\n\treturn matches;\n};\n\n/**\n * Returns the matches for a word in the list of irregulars.\n *\n * @param {string} word The word to match in the list.\n * @param {string} language The language for which to match.\n *\n * @returns {Array} A list with the matches.\n */\nconst irregularParticiples = function( word, language ) {\n\tlet matches = [];\n\n\tswitch ( language ) {\n\t\tcase \"fr\":\n\t\t\t// Match different classes of participles with suffixes.\n\t\t\tmatches = matches.concat( matchFrenchParticipleWithSuffix( word, irregularsRegularFrench, \"(e|s|es)\" ) );\n\t\t\tmatches = matches.concat( matchFrenchParticipleWithSuffix( word, irregularsEndingInSFrench, \"(e|es)\" ) );\n\n\t\t\t// Match irregular participles that don't require adding a suffix.\n\t\t\tfind( irregularsIrregularFrench, function( irregularParticiple ) {\n\t\t\t\tif ( irregularParticiple === word ) {\n\t\t\t\t\tmatches.push( irregularParticiple );\n\t\t\t\t}\n\t\t\t} );\n\t\t\tbreak;\n\t\tcase \"es\":\n\t\t\t// In Spanish, we only match passives from a word list.\n\t\t\tif ( includes( spanishParticiples, word ) ) {\n\t\t\t\tmatches.push( word );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"it\":\n\t\t\t// In Italian, we only match passives from a word list.\n\t\t\tif ( includes( italianParticiples, word ) ) {\n\t\t\t\tmatches.push( word );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"nl\":\n\t\t\tif ( includes( irregularsDutch, word ) ) {\n\t\t\t\tmatches.push( word );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"pl\":\n\t\t\t// In Polish, we only match passives from a word list.\n\t\t\tif ( includes( polishParticiples, word ) ) {\n\t\t\t\tmatches.push( word );\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"en\":\n\t\tdefault:\n\t\t\tfind( irregularsEnglish, function( irregularParticiple ) {\n\t\t\t\tif ( irregularParticiple === word ) {\n\t\t\t\t\tmatches.push( irregularParticiple );\n\t\t\t\t}\n\t\t\t} );\n\t\t\tbreak;\n\t}\n\treturn matches;\n};\n\n/**\n * Returns methods to return participles for a language.\n *\n * @returns {Object} Methods to return participles in a language.\n */\nexport default function() {\n\treturn {\n\t\tregularParticiples: memoize( regularParticiples ),\n\t\tirregularParticiples: memoize( irregularParticiples ),\n\t};\n}\n"]}