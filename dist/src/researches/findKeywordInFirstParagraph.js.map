{"version":3,"sources":["../../../src/researches/findKeywordInFirstParagraph.js"],"names":["matchParagraphs","getSentences","findTopicFormsInString","imageInText","findEmptyDivisions","getAnchorsFromText","matchStringWithRegex","reject","isEmpty","removeLinksFromText","text","anchors","length","forEach","anchor","replace","removeImagesFromText","images","imageTags","image","imageTag","paragraphHasNoText","emptyDivisions","emptyDivision","paper","researcher","topicForms","getResearch","locale","getLocale","paragraphs","getText","result","foundInOneSentence","foundInParagraph","keyphraseOrSynonym","sentences","useSynonyms","sentence","resultSentence","percentWordMatches","resultParagraph"],"mappings":"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","file":"findKeywordInFirstParagraph.js","sourcesContent":["/** @module analyses/findKeywordInFirstParagraph */\n\nimport matchParagraphs from \"../stringProcessing/matchParagraphs.js\";\nimport getSentences from \"../stringProcessing/getSentences.js\";\nimport { findTopicFormsInString } from \"./findKeywordFormsInString.js\";\nimport imageInText from \"../stringProcessing/imageInText\";\nimport findEmptyDivisions from \"../stringProcessing/findEmptyDivisions\";\nimport getAnchorsFromText from \"../stringProcessing/getAnchorsFromText\";\nimport matchStringWithRegex from \"../stringProcessing/matchStringWithRegex\";\n\nimport { reject } from \"lodash-es\";\nimport { isEmpty } from \"lodash-es\";\n\n/**\n * Removes links from text.\n *\n * @param {string} text The text string to analyze.\n *\n * @returns {string} The text with links stripped away.\n */\nfunction removeLinksFromText( text ) {\n\tconst anchors = getAnchorsFromText( text );\n\tif ( anchors.length > 0 ) {\n\t\tanchors.forEach( function( anchor ) {\n\t\t\ttext = text.replace( anchor, \"\" );\n\t\t} );\n\t}\n\n\treturn text;\n}\n\n\n/**\n * Removes images from text.\n *\n * @param {string} text The text string to analyze.\n *\n * @returns {string} The text with images stripped away.\n */\nfunction removeImagesFromText( text ) {\n\tconst images = imageInText( text );\n\tconst imageTags = matchStringWithRegex( text, \"</img>\" );\n\n\tif ( images.length > 0 ) {\n\t\timages.forEach( function( image ) {\n\t\t\ttext = text.replace( image, \"\" );\n\t\t} );\n\n\t\timageTags.forEach( function( imageTag ) {\n\t\t\ttext = text.replace( imageTag, \"\" );\n\t\t} );\n\t}\n\n\treturn text;\n}\n\n\n/**\n * Checks if the paragraph has no text.\n *\n * @param {string} text The text string to analyze.\n *\n * @returns {boolean} True if the paragraph has no text, false otherwise.\n */\nfunction paragraphHasNoText( text ) {\n\t// Strip links and check if paragraph consists of links only\n\ttext = removeLinksFromText( text );\n\tif ( text === \"\" ) {\n\t\treturn true;\n\t}\n\n\ttext = removeImagesFromText( text );\n\tif ( text === \"\" ) {\n\t\treturn true;\n\t}\n\n\t// Remove empty divisions from the text\n\tconst emptyDivisions = findEmptyDivisions( text );\n\tif ( emptyDivisions.length < 1 ) {\n\t\treturn false;\n\t}\n\n\temptyDivisions.forEach( function( emptyDivision ) {\n\t\ttext = text.replace( emptyDivision, \"\" );\n\t} );\n\n\treturn text === \"\";\n}\n\n/**\n * Checks if the introductory paragraph contains keyphrase or synonyms.\n * First splits the first paragraph by sentences. Finds the first paragraph which contains sentences e.g., not an image).\n * (1) Tries to find all (content) words from the keyphrase or a synonym phrase within one sentence.\n * If found all words within one sentence, returns an object with foundInOneSentence = true and keyphraseOrSynonym = \"keyphrase\"\n * or \"synonym\".\n * If it did not find all words within one sentence, goes ahead with matching the keyphrase with the entire first paragraph.\n * (2) Tries to find all (content) words from the keyphrase or a synonym phrase within the paragraph.\n * If found all words within the paragraph, returns an object with foundInOneSentence = false, foundInParagraph = true,\n * and keyphraseOrSynonym = \"keyphrase\" or \"synonym\".\n * If found not all words within the paragraph of nothing at all, returns an object with foundInOneSentence = false,\n * foundInParagraph = false, and keyphraseOrSynonym = \"\".\n *\n * @param {Paper} paper The text to check for paragraphs.\n * @param {Researcher} researcher The researcher to use for analysis.\n *\n * @returns {Object} Whether the keyphrase words were found in one sentence, whether the keyphrase words were found in\n * the paragraph, whether a keyphrase or a synonym phrase was matched.\n */\nexport default function( paper, researcher ) {\n\tconst topicForms = researcher.getResearch( \"morphology\" );\n\tconst locale = paper.getLocale();\n\n\tlet paragraphs = matchParagraphs( paper.getText() );\n\tparagraphs = reject( paragraphs, isEmpty );\n\tparagraphs = reject( paragraphs, paragraphHasNoText )[ 0 ] || \"\";\n\n\tconst result = {\n\t\tfoundInOneSentence: false,\n\t\tfoundInParagraph: false,\n\t\tkeyphraseOrSynonym: \"\",\n\t};\n\n\tconst sentences = getSentences( paragraphs );\n\t// Use both keyphrase and synonyms to match topic words in the first paragraph.\n\tconst useSynonyms = true;\n\n\tif ( ! isEmpty( sentences ) ) {\n\t\tsentences.forEach( function( sentence ) {\n\t\t\tconst resultSentence = findTopicFormsInString( topicForms, sentence, useSynonyms, locale );\n\t\t\tif ( resultSentence.percentWordMatches === 100 ) {\n\t\t\t\tresult.foundInOneSentence = true;\n\t\t\t\tresult.foundInParagraph = true;\n\t\t\t\tresult.keyphraseOrSynonym = resultSentence.keyphraseOrSynonym;\n\t\t\t\treturn result;\n\t\t\t}\n\t\t} );\n\n\t\tconst resultParagraph = findTopicFormsInString( topicForms, paragraphs, useSynonyms, locale );\n\t\tif ( resultParagraph.percentWordMatches === 100 ) {\n\t\t\tresult.foundInParagraph = true;\n\t\t\tresult.keyphraseOrSynonym = resultParagraph.keyphraseOrSynonym;\n\t\t\treturn result;\n\t\t}\n\t}\n\n\treturn result;\n}\n"]}