{"version":3,"sources":["../../../src/researches/getSentenceBeginnings.js"],"names":["getWords","stripSpaces","getFirstWordExceptions","stripFullTags","stripTags","isEmpty","forEach","filter","startsWithSameWord","currentSentenceBeginning","nextSentenceBeginning","compareFirstWords","sentenceBeginnings","sentences","consecutiveFirstWords","foundSentences","sameBeginnings","beginning","i","push","word","count","getSentenceBeginning","sentence","firstWordExceptions","words","length","firstWord","toLocaleLowerCase","indexOf","paper","researcher","getResearch","getLocale","map"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,iCAArB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,sBAAP,MAAmC,sCAAnC;AACA,SAASC,iBAAiBC,SAA1B,QAA2C,sCAA3C;;AAEA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAEA;;;;;;;AAOA,MAAMC,qBAAqB,UAAUC,wBAAV,EAAoCC,qBAApC,EAA4D;AACtF,KAAK,CAAEL,QAASI,wBAAT,CAAF,IAAyCA,6BAA6BC,qBAA3E,EAAmG;AAClG,SAAO,IAAP;AACA;;AAED,QAAO,KAAP;AACA,CAND;;AAQA;;;;;;;AAOA,MAAMC,oBAAoB,UAAUC,kBAAV,EAA8BC,SAA9B,EAA0C;AACnE,OAAMC,wBAAwB,EAA9B;AACA,KAAIC,iBAAiB,EAArB;AACA,KAAIC,iBAAiB,CAArB;;AAEAV,SAASM,kBAAT,EAA6B,UAAUK,SAAV,EAAqBC,CAArB,EAAyB;AACrD,QAAMT,2BAA2BQ,SAAjC;AACA,QAAMP,wBAAwBE,mBAAoBM,IAAI,CAAxB,CAA9B;AACAH,iBAAeI,IAAf,CAAqBN,UAAWK,CAAX,CAArB;;AAEA,MAAKV,mBAAoBC,wBAApB,EAA8CC,qBAA9C,CAAL,EAA6E;AAC5EM;AACA,GAFD,MAEO;AACNF,yBAAsBK,IAAtB,CAA4B,EAAEC,MAAMX,wBAAR,EAAkCY,OAAOL,cAAzC,EAAyDH,WAAWE,cAApE,EAA5B;AACAC,oBAAiB,CAAjB;AACAD,oBAAiB,EAAjB;AACA;AACD,EAZD;;AAcA,QAAOD,qBAAP;AACA,CApBD;;AAsBA;;;;;;;AAOA,SAASQ,oBAAT,CAA+BC,QAA/B,EAAyCC,mBAAzC,EAA+D;AAC9D,OAAMC,QAAQzB,SAAUI,UAAWH,YAAasB,QAAb,CAAX,CAAV,CAAd;;AAEA,KAAKE,MAAMC,MAAN,KAAiB,CAAtB,EAA0B;AACzB,SAAO,EAAP;AACA;;AAED,KAAIC,YAAYF,MAAO,CAAP,EAAWG,iBAAX,EAAhB;;AAEA,KAAKJ,oBAAoBK,OAApB,CAA6BF,SAA7B,IAA2C,CAAC,CAA5C,IAAiDF,MAAMC,MAAN,GAAe,CAArE,EAAyE;AACxEC,eAAa,MAAMF,MAAO,CAAP,CAAnB;AACA;;AAED,QAAOE,SAAP;AACA;;AAED;;;;;;;AAOA,eAAe,UAAUG,KAAV,EAAiBC,UAAjB,EAA8B;AAC5C,KAAIlB,YAAYkB,WAAWC,WAAX,CAAwB,WAAxB,CAAhB;AACA,OAAMR,sBAAsBtB,uBAAwB4B,MAAMG,SAAN,EAAxB,GAA5B;;AAEA,KAAIrB,qBAAqBC,UAAUqB,GAAV,CAAe,UAAUX,QAAV,EAAqB;AAC5D,SAAOD,qBAAsBC,QAAtB,EAAgCC,mBAAhC,CAAP;AACA,EAFwB,CAAzB;;AAIAX,aAAYA,UAAUN,MAAV,CAAkB,UAAUgB,QAAV,EAAqB;AAClD,SAAOvB,SAAUC,YAAasB,QAAb,CAAV,EAAoCG,MAApC,GAA6C,CAApD;AACA,EAFW,CAAZ;AAGAd,sBAAqBL,OAAQK,kBAAR,CAArB;;AAEA,QAAOD,kBAAmBC,kBAAnB,EAAuCC,SAAvC,CAAP;AACA","file":"getSentenceBeginnings.js","sourcesContent":["import getWords from \"../stringProcessing/getWords.js\";\nimport stripSpaces from \"../stringProcessing/stripSpaces.js\";\nimport getFirstWordExceptions from \"../helpers/getFirstWordExceptions.js\";\nimport { stripFullTags as stripTags } from \"../stringProcessing/stripHTMLTags.js\";\n\nimport { isEmpty } from \"lodash-es\";\nimport { forEach } from \"lodash-es\";\nimport { filter } from \"lodash-es\";\n\n/**\n * Compares the first word of each sentence with the first word of the following sentence.\n *\n * @param {string} currentSentenceBeginning The first word of the current sentence.\n * @param {string} nextSentenceBeginning The first word of the next sentence.\n * @returns {boolean} Returns true if sentence beginnings match.\n */\nconst startsWithSameWord = function( currentSentenceBeginning, nextSentenceBeginning ) {\n\tif ( ! isEmpty( currentSentenceBeginning ) && currentSentenceBeginning === nextSentenceBeginning ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Counts the number of similar sentence beginnings.\n *\n * @param {Array} sentenceBeginnings The array containing the first word of each sentence.\n * @param {Array} sentences The array containing all sentences.\n * @returns {Array} The array containing the objects containing the first words and the corresponding counts.\n */\nconst compareFirstWords = function( sentenceBeginnings, sentences ) {\n\tconst consecutiveFirstWords = [];\n\tlet foundSentences = [];\n\tlet sameBeginnings = 1;\n\n\tforEach( sentenceBeginnings, function( beginning, i ) {\n\t\tconst currentSentenceBeginning = beginning;\n\t\tconst nextSentenceBeginning = sentenceBeginnings[ i + 1 ];\n\t\tfoundSentences.push( sentences[ i ] );\n\n\t\tif ( startsWithSameWord( currentSentenceBeginning, nextSentenceBeginning ) ) {\n\t\t\tsameBeginnings++;\n\t\t} else {\n\t\t\tconsecutiveFirstWords.push( { word: currentSentenceBeginning, count: sameBeginnings, sentences: foundSentences } );\n\t\t\tsameBeginnings = 1;\n\t\t\tfoundSentences = [];\n\t\t}\n\t} );\n\n\treturn consecutiveFirstWords;\n};\n\n/**\n * Retrieves the first word from the sentence.\n *\n * @param {string} sentence The sentence to retrieve the first word from.\n * @param {Array} firstWordExceptions Exceptions to match against.\n * @returns {string} The first word of the sentence.\n */\nfunction getSentenceBeginning( sentence, firstWordExceptions ) {\n\tconst words = getWords( stripTags( stripSpaces( sentence ) ) );\n\n\tif ( words.length === 0 ) {\n\t\treturn \"\";\n\t}\n\n\tlet firstWord = words[ 0 ].toLocaleLowerCase();\n\n\tif ( firstWordExceptions.indexOf( firstWord ) > -1 && words.length > 1 ) {\n\t\tfirstWord += \" \" + words[ 1 ];\n\t}\n\n\treturn firstWord;\n}\n\n/**\n * Gets the first word of each sentence from the text, and returns an object containing the first word of each sentence and the corresponding counts.\n *\n * @param {Paper} paper The Paper object to get the text from.\n * @param {Researcher} researcher The researcher this research is a part of.\n * @returns {Object} The object containing the first word of each sentence and the corresponding counts.\n */\nexport default function( paper, researcher ) {\n\tlet sentences = researcher.getResearch( \"sentences\" );\n\tconst firstWordExceptions = getFirstWordExceptions( paper.getLocale() )();\n\n\tlet sentenceBeginnings = sentences.map( function( sentence ) {\n\t\treturn getSentenceBeginning( sentence, firstWordExceptions );\n\t} );\n\n\tsentences = sentences.filter( function( sentence ) {\n\t\treturn getWords( stripSpaces( sentence ) ).length > 0;\n\t} );\n\tsentenceBeginnings = filter( sentenceBeginnings );\n\n\treturn compareFirstWords( sentenceBeginnings, sentences );\n}\n\n\n"]}