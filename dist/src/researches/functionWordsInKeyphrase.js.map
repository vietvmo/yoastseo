{"version":3,"sources":["../../../src/researches/functionWordsInKeyphrase.js"],"names":["filter","get","includes","isEmpty","getWords","getLanguage","getFunctionWordsFactory","getFunctionWords","paper","keyphrase","getKeyword","doubleQuotes","length","keyphraseWords","functionWords","getLocale","word","all","trim","toLocaleLowerCase"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,GAAjB,EAAsBC,QAAtB,EAAgCC,OAAhC,QAA+C,WAA/C;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,uBAAP,MAAoC,gCAApC;;AAEA,MAAMC,mBAAmBD,yBAAzB;AACA;;;;;;;AAOA,eAAe,UAAUE,KAAV,EAAkB;AAChC,OAAMC,YAAYD,MAAME,UAAN,EAAlB;;AAEA;AACA,OAAMC,eAAe,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,IAArC,CAArB;AACA,KAAKT,SAAUS,YAAV,EAAwBF,UAAW,CAAX,CAAxB,KAA4CP,SAAUS,YAAV,EAAwBF,UAAWA,UAAUG,MAAV,GAAmB,CAA9B,CAAxB,CAAjD,EAA+G;AAC9G,SAAO,KAAP;AACA;;AAED,KAAIC,iBAAiBT,SAAUK,SAAV,CAArB;AACA,OAAMK,gBAAgBb,IAAKM,gBAAL,EAAuB,CAAEF,YAAaG,MAAMO,SAAN,EAAb,CAAF,CAAvB,EAA6D,EAA7D,CAAtB;;AAEAF,kBAAiBb,OAAQa,cAAR,EAAwB,UAAUG,IAAV,EAAiB;AACzD,SAAS,CAAEd,SAAUY,cAAcG,GAAxB,EAA6BD,KAAKE,IAAL,GAAYC,iBAAZ,EAA7B,CAAX;AACA,EAFgB,CAAjB;;AAIA,QAAOhB,QAASU,cAAT,CAAP;AACA","file":"functionWordsInKeyphrase.js","sourcesContent":["import { filter, get, includes, isEmpty } from \"lodash-es\";\nimport getWords from \"../stringProcessing/getWords\";\nimport getLanguage from \"../helpers/getLanguage\";\nimport getFunctionWordsFactory from \"../helpers/getFunctionWords.js\";\n\nconst getFunctionWords = getFunctionWordsFactory();\n/**\n * Checks if the keyphrase contains of function words only.\n *\n * @param {object} paper The paper containing the keyword.\n *\n * @returns {boolean} Whether the keyphrase contains of content words only.\n */\nexport default function( paper ) {\n\tconst keyphrase = paper.getKeyword();\n\n\t// Return false if there are double quotes around the keyphrase.\n\tconst doubleQuotes = [ \"“\", \"”\", \"〝\", \"〞\", \"〟\", \"‟\", \"„\", \"\\\"\" ];\n\tif ( includes( doubleQuotes, keyphrase[ 0 ] ) && includes( doubleQuotes, keyphrase[ keyphrase.length - 1 ] ) ) {\n\t\treturn false;\n\t}\n\n\tlet keyphraseWords = getWords( keyphrase );\n\tconst functionWords = get( getFunctionWords, [ getLanguage( paper.getLocale() ) ], [] );\n\n\tkeyphraseWords = filter( keyphraseWords, function( word ) {\n\t\treturn ( ! includes( functionWords.all, word.trim().toLocaleLowerCase() ) );\n\t} );\n\n\treturn isEmpty( keyphraseWords );\n}\n"]}