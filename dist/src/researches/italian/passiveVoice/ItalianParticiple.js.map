{"version":3,"sources":["../../../../../src/researches/italian/passiveVoice/ItalianParticiple.js"],"names":["Participle","checkException","directPrecedenceException","precedenceException","ItalianParticiple","participle","sentencePart","attributes","call","require","inherits","prototype","isPassive","getSentencePart","getParticiple","language","getLanguage"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,+BAAvB;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,yBAAP,MAAsC,iEAAtC;AACA,OAAOC,mBAAP,MAAgC,2DAAhC;;AAGA;;;;;;;;;AASA,IAAIC,oBAAoB,UAAUC,UAAV,EAAsBC,YAAtB,EAAoCC,UAApC,EAAiD;AACxEP,aAAWQ,IAAX,CAAiB,IAAjB,EAAuBH,UAAvB,EAAmCC,YAAnC,EAAiDC,UAAjD;AACAN,iBAAeO,IAAf,CAAqB,IAArB;AACA,CAHD;;AAKAC,QAAS,MAAT,EAAkBC,QAAlB,CAA4BN,iBAA5B,EAA+CJ,UAA/C;;AAEA;;;;;;AAMAI,kBAAkBO,SAAlB,CAA4BC,SAA5B,GAAwC,YAAW;AAClD,QAAMN,eAAe,KAAKO,eAAL,EAArB;AACA,QAAMR,aAAa,KAAKS,aAAL,EAAnB;AACA,QAAMC,WAAW,KAAKC,WAAL,EAAjB;;AAEA,SAAO,CAAE,KAAKd,yBAAL,CAAgCI,YAAhC,EAA8CD,UAA9C,EAA0DU,QAA1D,CAAF,IACN,CAAE,KAAKZ,mBAAL,CAA0BG,YAA1B,EAAwCD,UAAxC,EAAoDU,QAApD,CADH;AAEA,CAPD;;AASAX,kBAAkBO,SAAlB,CAA4BT,yBAA5B,GAAwDA,yBAAxD;;AAEAE,kBAAkBO,SAAlB,CAA4BR,mBAA5B,GAAkDA,mBAAlD;;AAEA,eAAeC,iBAAf","file":"ItalianParticiple.js","sourcesContent":["import Participle from \"../../../values/Participle.js\";\nimport checkException from \"../../passiveVoice/periphrastic/checkException.js\";\nimport directPrecedenceException from \"../../../stringProcessing/directPrecedenceExceptionWithoutRegex\";\nimport precedenceException from \"../../../stringProcessing/precedenceExceptionWithoutRegex\";\n\n\n/**\n * Creates an Participle object for the Italian language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {Object} attributes The attributes object.\n *\n * @constructor\n */\nvar ItalianParticiple = function( participle, sentencePart, attributes ) {\n\tParticiple.call( this, participle, sentencePart, attributes );\n\tcheckException.call( this );\n};\n\nrequire( \"util\" ).inherits( ItalianParticiple, Participle );\n\n/**\n * Checks if any exceptions are applicable to this participle that would result in the sentence part not being passive.\n * If no exceptions are found, the sentence part is passive.\n *\n * @returns {boolean} Returns true if no exception is found.\n */\nItalianParticiple.prototype.isPassive = function() {\n\tconst sentencePart = this.getSentencePart();\n\tconst participle = this.getParticiple();\n\tconst language = this.getLanguage();\n\n\treturn ! this.directPrecedenceException( sentencePart, participle, language ) &&\n\t\t! this.precedenceException( sentencePart, participle, language );\n};\n\nItalianParticiple.prototype.directPrecedenceException = directPrecedenceException;\n\nItalianParticiple.prototype.precedenceException = precedenceException;\n\nexport default ItalianParticiple;\n"]}