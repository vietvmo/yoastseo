{"version":3,"sources":["../../../src/researches/findTransitionWords.js"],"names":["createRegexFromDoubleArray","getSentences","normalizeSingle","normalizeSingleQuotes","getTransitionWords","isWordInSentence","matchWordInSentence","flattenDeep","regexFromDoubleArray","regexFromDoubleArrayCacheKey","getRegexFromDoubleArray","twoPartTransitionWords","cacheKey","join","matchTwoPartTransitionWords","sentence","twoPartTransitionWordsRegex","match","matchTransitionWords","transitionWords","filter","word","checkSentencesForTransitionWords","sentences","results","forEach","twoPartMatches","push","transitionWordMatches","length","paper","locale","getLocale","getText","sentenceResults","totalSentences","transitionWordSentences"],"mappings":"AAAA,OAAOA,0BAAP,MAAuC,mDAAvC;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,SAASC,mBAAmBC,qBAA5B,QAAyD,+BAAzD;AACA,OAAOC,kBAAP,MAA+B,kCAA/B;AACA,SAASC,oBAAoBC,mBAA7B,QAAwD,4CAAxD;;AAEA,SAASC,WAAT,QAA4B,WAA5B;;AAEA,IAAIC,uBAAuB,IAA3B;AACA,IAAIC,+BAA+B,EAAnC;;AAEA;;;;;;;AAOA,SAASC,uBAAT,CAAkCC,sBAAlC,EAA2D;AAC1D,OAAMC,WAAWL,YAAaI,sBAAb,EAAsCE,IAAtC,CAA4C,EAA5C,CAAjB;AACA,KAAKJ,iCAAiCG,QAAjC,IAA6CJ,yBAAyB,IAA3E,EAAkF;AACjFC,iCAA+BG,QAA/B;AACAJ,yBAAuBR,2BAA4BW,sBAA5B,CAAvB;AACA;AACD,QAAOH,oBAAP;AACA;;AAED;;;;;;;AAOA,MAAMM,8BAA8B,UAAUC,QAAV,EAAoBJ,sBAApB,EAA6C;AAChFI,YAAWZ,sBAAuBY,QAAvB,CAAX;AACA,OAAMC,8BAA8BN,wBAAyBC,sBAAzB,CAApC;AACA,QAAOI,SAASE,KAAT,CAAgBD,2BAAhB,CAAP;AACA,CAJD;;AAMA;;;;;;;AAOA,MAAME,uBAAuB,UAAUH,QAAV,EAAoBI,eAApB,EAAsC;AAClEJ,YAAWZ,sBAAuBY,QAAvB,CAAX;AACA,QAAOI,gBAAgBC,MAAhB,CAAwBC,QAAQf,oBAAqBe,IAArB,EAA2BN,QAA3B,CAAhC,CAAP;AACA,CAHD;;AAKA;;;;;;;AAOA,MAAMO,mCAAmC,UAAUC,SAAV,EAAqBJ,eAArB,EAAuC;AAC/E,OAAMK,UAAU,EAAhB;;AAEAD,WAAUE,OAAV,CAAmBV,YAAY;AAC9B,QAAMW,iBAAiBZ,4BAA6BC,QAA7B,EAAuCI,gBAAgBR,sBAAhB,EAAvC,CAAvB;;AAEA,MAAKe,mBAAmB,IAAxB,EAA+B;AAC9BF,WAAQG,IAAR,CAAc;AACbZ,cAAUA,QADG;AAEbI,qBAAiBO;AAFJ,IAAd;;AAKA;AACA;;AAED,QAAME,wBAAwBV,qBAAsBH,QAAtB,EAAgCI,gBAAgBA,eAAhD,CAA9B;;AAEA,MAAKS,sBAAsBC,MAAtB,KAAiC,CAAtC,EAA0C;AACzCL,WAAQG,IAAR,CAAc;AACbZ,cAAUA,QADG;AAEbI,qBAAiBS;AAFJ,IAAd;;AAKA;AACA;AACD,EAtBD;;AAwBA,QAAOJ,OAAP;AACA,CA5BD;;AA8BA;;;;;;;;AAQA,eAAe,UAAUM,KAAV,EAAkB;AAChC,OAAMC,SAASD,MAAME,SAAN,EAAf;AACA,OAAMb,kBAAkBf,mBAAoB2B,MAApB,CAAxB;AACA,OAAMR,YAAYtB,aAAc6B,MAAMG,OAAN,EAAd,CAAlB;AACA,OAAMC,kBAAkBZ,iCAAkCC,SAAlC,EAA6CJ,eAA7C,CAAxB;;AAEA,QAAO;AACNgB,kBAAgBZ,UAAUM,MADpB;AAENK,mBAAiBA,eAFX;AAGNE,2BAAyBF,gBAAgBL;AAHnC,EAAP;AAKA","file":"findTransitionWords.js","sourcesContent":["import createRegexFromDoubleArray from \"../stringProcessing/createRegexFromDoubleArray.js\";\nimport getSentences from \"../stringProcessing/getSentences.js\";\nimport { normalizeSingle as normalizeSingleQuotes } from \"../stringProcessing/quotes.js\";\nimport getTransitionWords from \"../helpers/getTransitionWords.js\";\nimport { isWordInSentence as matchWordInSentence } from \"../stringProcessing/matchWordInSentence.js\";\n\nimport { flattenDeep } from \"lodash-es\";\n\nlet regexFromDoubleArray = null;\nlet regexFromDoubleArrayCacheKey = \"\";\n\n/**\n * Memoizes the createRegexFromDoubleArray with the twoPartTransitionWords.\n *\n * @param {Array} twoPartTransitionWords The array containing two-part transition words.\n *\n * @returns {RegExp} The RegExp to match text with a double array.\n */\nfunction getRegexFromDoubleArray( twoPartTransitionWords ) {\n\tconst cacheKey = flattenDeep( twoPartTransitionWords ).join( \"\" );\n\tif ( regexFromDoubleArrayCacheKey !== cacheKey || regexFromDoubleArray === null ) {\n\t\tregexFromDoubleArrayCacheKey = cacheKey;\n\t\tregexFromDoubleArray = createRegexFromDoubleArray( twoPartTransitionWords );\n\t}\n\treturn regexFromDoubleArray;\n}\n\n/**\n * Matches the sentence against two part transition words.\n *\n * @param {string} sentence The sentence to match against.\n * @param {Array} twoPartTransitionWords The array containing two-part transition words.\n * @returns {Array} The found transitional words.\n */\nconst matchTwoPartTransitionWords = function( sentence, twoPartTransitionWords ) {\n\tsentence = normalizeSingleQuotes( sentence );\n\tconst twoPartTransitionWordsRegex = getRegexFromDoubleArray( twoPartTransitionWords );\n\treturn sentence.match( twoPartTransitionWordsRegex );\n};\n\n/**\n * Matches the sentence against transition words.\n *\n * @param {string} sentence The sentence to match against.\n * @param {Array} transitionWords The array containing transition words.\n * @returns {Array} The found transitional words.\n */\nconst matchTransitionWords = function( sentence, transitionWords ) {\n\tsentence = normalizeSingleQuotes( sentence );\n\treturn transitionWords.filter( word => matchWordInSentence( word, sentence ) );\n};\n\n/**\n * Checks the passed sentences to see if they contain transition words.\n *\n * @param {Array} sentences The sentences to match against.\n * @param {Object} transitionWords The object containing both transition words and two part transition words.\n * @returns {Array} Array of sentence objects containing the complete sentence and the transition words.\n */\nconst checkSentencesForTransitionWords = function( sentences, transitionWords ) {\n\tconst results = [];\n\n\tsentences.forEach( sentence => {\n\t\tconst twoPartMatches = matchTwoPartTransitionWords( sentence, transitionWords.twoPartTransitionWords() );\n\n\t\tif ( twoPartMatches !== null ) {\n\t\t\tresults.push( {\n\t\t\t\tsentence: sentence,\n\t\t\t\ttransitionWords: twoPartMatches,\n\t\t\t} );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst transitionWordMatches = matchTransitionWords( sentence, transitionWords.transitionWords );\n\n\t\tif ( transitionWordMatches.length !== 0 ) {\n\t\t\tresults.push( {\n\t\t\t\tsentence: sentence,\n\t\t\t\ttransitionWords: transitionWordMatches,\n\t\t\t} );\n\n\t\t\treturn;\n\t\t}\n\t} );\n\n\treturn results;\n};\n\n/**\n * Checks how many sentences from a text contain at least one transition word or two-part transition word\n * that are defined in the transition words config and two part transition words config.\n *\n * @param {Paper} paper The Paper object to get text from.\n * @returns {object} An object with the total number of sentences in the text\n * and the total number of sentences containing one or more transition words.\n */\nexport default function( paper ) {\n\tconst locale = paper.getLocale();\n\tconst transitionWords = getTransitionWords( locale );\n\tconst sentences = getSentences( paper.getText() );\n\tconst sentenceResults = checkSentencesForTransitionWords( sentences, transitionWords );\n\n\treturn {\n\t\ttotalSentences: sentences.length,\n\t\tsentenceResults: sentenceResults,\n\t\ttransitionWordSentences: sentenceResults.length,\n\t};\n}\n"]}