{"version":3,"sources":["../../../src/researches/metaDescriptionKeyword.js"],"names":["matchWords","getSentences","replaceFoundKeywordForms","description","matchedKeywordForms","maxToRemove","forEach","keywordForm","matches","slice","match","replace","matchPerSentence","sentence","topicForms","locale","matchesKeyphrase","keyphraseForms","map","keywordForms","fullKeyphraseMatches","Math","min","count","fullSynonymsMatches","synonymsForms","synonymForms","fullSynonymMatches","reduce","sum","paper","researcher","getDescription","getLocale","getResearch","sentences","sentenceMatches"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,wCAAvB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;;AAEA;;;;;;;;AAQA,MAAMC,2BAA2B,UAAUC,WAAV,EAAuBC,mBAAvB,EAA4CC,WAA5C,EAA0D;AAC1F;AACAD,qBAAoBE,OAApB,CAA6BC,eAC5BA,YAAYC,OAAZ,CAAoBC,KAApB,CAA2B,CAA3B,EAA8BJ,WAA9B,EAA4CC,OAA5C,CACCI,SAAS;AACRP,gBAAcA,YAAYQ,OAAZ,CAAqBD,KAArB,EAA4B,EAA5B,CAAd;AACA,EAHF,CADD;AAOA,QAAOP,WAAP;AACA,CAVD;;AAYA;;;;;;;;;;AAUA,MAAMS,mBAAmB,UAAUC,QAAV,EAAoBC,UAApB,EAAgCC,MAAhC,EAAyC;AACjE;AACA,OAAMC,mBAAmBF,WAAWG,cAAX,CAA0BC,GAA1B,CAA+BC,gBAAgBnB,WAAYa,QAAZ,EAAsBM,YAAtB,EAAoCJ,MAApC,CAA/C,CAAzB;;AAEA;AACA,OAAMK,uBAAuBC,KAAKC,GAAL,CAAU,GAAGN,iBAAiBE,GAAjB,CAAsBR,SAASA,MAAMa,KAArC,CAAb,CAA7B;;AAEA;AACAV,YAAWX,yBAA0BW,QAA1B,EAAoCG,gBAApC,EAAsDI,oBAAtD,CAAX;;AAEA;AACA,OAAMI,sBAAsBV,WAAWW,aAAX,CAAyBP,GAAzB,CAC3BQ,gBAAgB;AACf;AACA,QAAMlB,UAAUkB,aAAaR,GAAb,CAAkBC,gBAAgBnB,WAAYa,QAAZ,EAAsBM,YAAtB,EAAoCJ,MAApC,CAAlC,CAAhB;AACA;AACA,QAAMY,qBAAqBN,KAAKC,GAAL,CAAU,GAAGd,QAAQU,GAAR,CAAaR,SAASA,MAAMa,KAA5B,CAAb,CAA3B;AACA;AACAV,aAAWX,yBAA0BW,QAA1B,EAAoCG,gBAApC,EAAsDW,kBAAtD,CAAX;AACA,SAAOA,kBAAP;AACA,EAT0B,CAA5B;;AAYA,QAAO,CAAEP,oBAAF,EAAwB,GAAGI,mBAA3B,EAAiDI,MAAjD,CAAyD,CAAEC,GAAF,EAAON,KAAP,KAAkBM,MAAMN,KAAjF,EAAwF,CAAxF,CAAP;AACA,CAxBD;;AA0BA;;;;;;;;AAQA,eAAe,UAAUO,KAAV,EAAiBC,UAAjB,EAA8B;AAC5C,OAAM5B,cAAc2B,MAAME,cAAN,EAApB;AACA,OAAMjB,SAASe,MAAMG,SAAN,EAAf;;AAEA,OAAMnB,aAAaiB,WAAWG,WAAX,CAAwB,YAAxB,CAAnB;;AAEA,OAAMC,YAAYlC,aAAcE,WAAd,CAAlB;;AAEA,OAAMiC,kBAAkBD,UAAUjB,GAAV,CACvBL,YAAYD,iBAAkBC,QAAlB,EAA4BC,UAA5B,EAAwCC,MAAxC,CADW,CAAxB;;AAIA,QAAOqB,gBAAgBR,MAAhB,CAAwB,CAAEC,GAAF,EAAON,KAAP,KAAkBM,MAAMN,KAAhD,EAAuD,CAAvD,CAAP;AACA","file":"metaDescriptionKeyword.js","sourcesContent":["import matchWords from \"../stringProcessing/matchTextWithArray\";\nimport getSentences from \"../stringProcessing/getSentences\";\n\n/**\n * Replaces found keyword forms in the given description.\n *\n * @param {string} description the description to remove the matched keyword forms from.\n * @param {Object[]} matchedKeywordForms the matched keyword forms to remove from the description.\n * @param {Number} maxToRemove the maximum amount of matches of each individual keyword to remove.\n * @returns {string} the description with the keywords removed.\n */\nconst replaceFoundKeywordForms = function( description, matchedKeywordForms, maxToRemove ) {\n\t// Replace matches so we do not match them for synonyms.\n\tmatchedKeywordForms.forEach( keywordForm =>\n\t\tkeywordForm.matches.slice( 0, maxToRemove ).forEach(\n\t\t\tmatch => {\n\t\t\t\tdescription = description.replace( match, \"\" );\n\t\t\t}\n\t\t)\n\t);\n\treturn description;\n};\n\n/**\n * Counts the number of full keyphrase matches in the given sentence. Takes synonyms into account.\n *\n * A full keyphrase is when all keywords in the keyphrase match.\n *\n * @param {string} sentence the sentence that needs to be analyzed.\n * @param {Object} topicForms the keyphrase (and its optional synonyms') word forms.\n * @param {string} locale the current locale\n * @returns {Number} the number of matched keyphrases in the sentence.\n */\nconst matchPerSentence = function( sentence, topicForms, locale ) {\n\t// Focus keyphrase matches.\n\tconst matchesKeyphrase = topicForms.keyphraseForms.map( keywordForms => matchWords( sentence, keywordForms, locale ) );\n\n\t// Count the number of matches that contain every word in the entire keyphrase.\n\tconst fullKeyphraseMatches = Math.min( ...matchesKeyphrase.map( match => match.count ) );\n\n\t// Replace all full keyphrase matches so we do not match them for synonyms.\n\tsentence = replaceFoundKeywordForms( sentence, matchesKeyphrase, fullKeyphraseMatches );\n\n\t// Keyphrase synonyms matches.\n\tconst fullSynonymsMatches = topicForms.synonymsForms.map(\n\t\tsynonymForms => {\n\t\t\t// Synonym keyphrase matches.\n\t\t\tconst matches = synonymForms.map( keywordForms => matchWords( sentence, keywordForms, locale ) );\n\t\t\t// Count the number of matches that contain every word in the entire synonym keyphrase.\n\t\t\tconst fullSynonymMatches = Math.min( ...matches.map( match => match.count ) );\n\t\t\t// Replace all full matches so we do not match them for other synonyms.\n\t\t\tsentence = replaceFoundKeywordForms( sentence, matchesKeyphrase, fullSynonymMatches );\n\t\t\treturn fullSynonymMatches;\n\t\t}\n\t);\n\n\treturn [ fullKeyphraseMatches, ...fullSynonymsMatches ].reduce( ( sum, count ) => sum + count, 0 );\n};\n\n/**\n * Counts the number of full keyphrase matches in the description.\n * Returns -1 if no description is specified in the given paper.\n *\n * @param {Paper} paper The paper object containing the description.\n * @param {Researcher} researcher the researcher object to gather researchers from.\n * @returns {Number} The number of keyphrase matches for the entire description.\n */\nexport default function( paper, researcher ) {\n\tconst description = paper.getDescription();\n\tconst locale = paper.getLocale();\n\n\tconst topicForms = researcher.getResearch( \"morphology\" );\n\n\tconst sentences = getSentences( description );\n\n\tconst sentenceMatches = sentences.map(\n\t\tsentence => matchPerSentence( sentence, topicForms, locale )\n\t);\n\n\treturn sentenceMatches.reduce( ( sum, count ) => sum + count, 0 );\n}\n\n"]}