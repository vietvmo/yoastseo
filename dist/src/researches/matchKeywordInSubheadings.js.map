{"version":3,"sources":["../../../src/researches/matchKeywordInSubheadings.js"],"names":["includes","getFunctionWordsLanguages","getLanguage","getSubheadingContents","getSubheadingContentsTopLevel","stripSomeTags","findTopicFormsInString","functionWordLanguages","numberOfSubheadingsReflectingTopic","topicForms","subheadings","useSynonyms","locale","isFunctionWordLanguage","filter","subheading","matchedTopicForms","process","env","YOAST_RECALIBRATION","percentWordMatches","length","paper","researcher","text","getText","getResearch","getLocale","result","count","matches","percentReflectingTopic"],"mappings":"AAAA,SAASA,QAAT,QAAyB,WAAzB;AACA,OAAOC,yBAAP,MAAsC,sCAAtC;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,qBAAT,EAAgCC,6BAAhC,QAAqE,oCAArE;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,SAASC,sBAAT,QAAuC,4BAAvC;;AAEA,MAAMC,wBAAwBN,2BAA9B;;AAEA;;;;;;;;;;AAUA,MAAMO,qCAAqC,UAAUC,UAAV,EAAsBC,WAAtB,EAAmCC,WAAnC,EAAgDC,MAAhD,EAAyD;AACnG,OAAMC,yBAAyBb,SAAUO,qBAAV,EAAiCL,YAAaU,MAAb,CAAjC,CAA/B;;AAEA,QAAOF,YAAYI,MAAZ,CAAoBC,cAAc;AACxC,QAAMC,oBAAoBV,uBAAwBG,UAAxB,EAAoCM,UAApC,EAAgDJ,WAAhD,EAA6DC,MAA7D,CAA1B;;AAEA,MAAKK,QAAQC,GAAR,CAAYC,mBAAZ,KAAoC,SAApC,IAAiD,CAAEN,sBAAxD,EAAiF;AAChF,UAAOG,kBAAkBI,kBAAlB,KAAyC,GAAhD;AACA;AACD,SAAOJ,kBAAkBI,kBAAlB,GAAuC,EAA9C;AACA,EAPM,EAOHC,MAPJ;AAQA,CAXD;;AAaA;;;;;;;;;;;AAWA,eAAe,UAAUC,KAAV,EAAiBC,UAAjB,EAA8B;AAC5C,OAAMC,OAAOnB,cAAeiB,MAAMG,OAAN,EAAf,CAAb;AACA,OAAMhB,aAAac,WAAWG,WAAX,CAAwB,YAAxB,CAAnB;AACA,OAAMd,SAASU,MAAMK,SAAN,EAAf;AACA,OAAMC,SAAS,EAAEC,OAAO,CAAT,EAAYC,SAAS,CAArB,EAAwBC,wBAAwB,CAAhD,EAAf;AACA,OAAMpB,cAAc,IAApB;AACA,OAAMD,cAAcO,QAAQC,GAAR,CAAYC,mBAAZ,KAAoC,SAApC,GACjBf,8BAA+BoB,IAA/B,CADiB,GAEjBrB,sBAAuBqB,IAAvB,CAFH;;AAIA,KAAKd,YAAYW,MAAZ,KAAuB,CAA5B,EAAgC;AAC/BO,SAAOC,KAAP,GAAenB,YAAYW,MAA3B;AACAO,SAAOE,OAAP,GAAiBtB,mCAAoCC,UAApC,EAAgDC,WAAhD,EAA6DC,WAA7D,EAA0EC,MAA1E,CAAjB;AACAgB,SAAOG,sBAAP,GAAgCH,OAAOE,OAAP,GAAiBF,OAAOC,KAAxB,GAAgC,GAAhE;AACA;;AAED,QAAOD,MAAP;AACA","file":"matchKeywordInSubheadings.js","sourcesContent":["import { includes } from \"lodash-es\";\nimport getFunctionWordsLanguages from \"../helpers/getFunctionWordsLanguages\";\nimport getLanguage from \"../helpers/getLanguage\";\nimport { getSubheadingContents, getSubheadingContentsTopLevel } from \"../stringProcessing/getSubheadings\";\nimport stripSomeTags from \"../stringProcessing/stripNonTextTags\";\nimport { findTopicFormsInString } from \"./findKeywordFormsInString\";\n\nconst functionWordLanguages = getFunctionWordsLanguages();\n\n/**\n * Computes the amount of subheadings reflecting the topic.\n *\n * @param {Object}      topicForms      The main key phrase and its synonyms to check.\n * @param {string[]}    subheadings     The subheadings to check.\n * @param {boolean}     useSynonyms     Whether to match synonyms or only main keyphrase.\n * @param {string}      locale          The current locale.\n *\n * @returns {number} The amount of subheadings reflecting the topic.\n */\nconst numberOfSubheadingsReflectingTopic = function( topicForms, subheadings, useSynonyms, locale ) {\n\tconst isFunctionWordLanguage = includes( functionWordLanguages, getLanguage( locale ) );\n\n\treturn subheadings.filter( subheading => {\n\t\tconst matchedTopicForms = findTopicFormsInString( topicForms, subheading, useSynonyms, locale );\n\n\t\tif ( process.env.YOAST_RECALIBRATION === \"enabled\" && ! isFunctionWordLanguage ) {\n\t\t\treturn matchedTopicForms.percentWordMatches === 100;\n\t\t}\n\t\treturn matchedTopicForms.percentWordMatches > 50;\n\t} ).length;\n};\n\n/**\n * Checks if there are any subheadings like h2 in the text\n * and if they have the key phrase and the keywords' respective morphological forms in them.\n *\n * Also checks for synonyms.\n *\n * @param {Object}      paper       The paper object containing the text and keyword.\n * @param {Researcher}  researcher  The researcher object.\n *\n * @returns {Object} The result object.\n */\nexport default function( paper, researcher ) {\n\tconst text = stripSomeTags( paper.getText() );\n\tconst topicForms = researcher.getResearch( \"morphology\" );\n\tconst locale = paper.getLocale();\n\tconst result = { count: 0, matches: 0, percentReflectingTopic: 0 };\n\tconst useSynonyms = true;\n\tconst subheadings = process.env.YOAST_RECALIBRATION === \"enabled\"\n\t\t? getSubheadingContentsTopLevel( text )\n\t\t: getSubheadingContents( text );\n\n\tif ( subheadings.length !== 0 ) {\n\t\tresult.count = subheadings.length;\n\t\tresult.matches = numberOfSubheadingsReflectingTopic( topicForms, subheadings, useSynonyms, locale );\n\t\tresult.percentReflectingTopic = result.matches / result.count * 100;\n\t}\n\n\treturn result;\n}\n"]}