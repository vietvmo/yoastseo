{"version":3,"sources":["../../../src/researches/getPassiveVoice.js"],"names":["getSentences","stripFullTags","stripHTMLTags","getLanguage","Sentence","forEach","isPassiveSentencePart","isPassiveSentence","getPeriphrasticSentencePartsDefault","getPeriphrasticSentencePartsSplitOnStopwords","morphologicalLanguages","periphrasticLanguages","getMorphologicalPassives","sentences","language","passiveSentences","sentence","strippedSentence","getSentenceText","toLocaleLowerCase","setPassive","isPassive","push","getPeriphrasticPassives","sentenceParts","passive","sentencePart","getSentencePartText","getAuxiliaries","paper","text","getText","locale","getLocale","map","totalNumberSentences","length","includes","total","passives"],"mappings":"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","file":"getPassiveVoice.js","sourcesContent":["import getSentences from \"../stringProcessing/getSentences.js\";\nimport { stripFullTags as stripHTMLTags } from \"../stringProcessing/stripHTMLTags.js\";\nimport getLanguage from \"../helpers/getLanguage.js\";\nimport Sentence from \"../values/Sentence.js\";\n\nimport { forEach } from \"lodash-es\";\n\nimport isPassiveSentencePart from \"./passiveVoice/periphrastic/determinePassiveSentencePart.js\";\nimport isPassiveSentence from \"./passiveVoice/morphological/determinePassiveSentence.js\";\nimport getPeriphrasticSentencePartsDefault from \"./passiveVoice/periphrastic/getSentenceParts.js\";\nimport getPeriphrasticSentencePartsSplitOnStopwords from \"./passiveVoice/periphrastic/getSentencePartsSplitOnStopwords.js\";\n\nconst morphologicalLanguages = [ \"ru\", \"tr\", \"sv\" ];\nconst periphrasticLanguages = [ \"en\", \"de\", \"nl\", \"fr\", \"es\", \"it\", \"pt\", \"cn\", \"pl\" ];\n\n/* Languages that employ both morphological and periphrastic passive voice marking have not been implemented yet.\n * const morphologicalAndPeriphrasticLanguages = [ \"da\", \"nb\" ];\n */\n\n/**\n * Looks for morphological passive voice.\n *\n * @param {Array} sentences Sentences extracted from the text.\n * @param {string} language Language of the text.\n * @returns {Object} The found passive sentences.\n */\nconst getMorphologicalPassives = function( sentences, language ) {\n\tconst passiveSentences = [];\n\n\tforEach( sentences, function( sentence ) {\n\t\tconst strippedSentence = stripHTMLTags( sentence.getSentenceText() ).toLocaleLowerCase();\n\n\t\tsentence.setPassive( isPassiveSentence( strippedSentence, language ) );\n\n\t\tif ( sentence.isPassive() === true ) {\n\t\t\tpassiveSentences.push( sentence.getSentenceText() );\n\t\t}\n\t} );\n\treturn {\n\t\tpassiveSentences,\n\t};\n};\n\n/**\n * Looks for periphrastic passive voice.\n *\n * @param {Array} sentences Sentences extracted from the text.\n * @param {string} language Language of the text.\n * @returns {Object} The found passive sentences.\n */\nconst getPeriphrasticPassives = function( sentences, language ) {\n\tconst passiveSentences = [];\n\n\tforEach( sentences, function( sentence ) {\n\t\tconst strippedSentence = stripHTMLTags( sentence.getSentenceText() ).toLocaleLowerCase();\n\n\t\t// The functionality based on sentencePart objects should be rewritten using array indices of stopwords and auxiliaries.\n\t\tlet sentenceParts = [];\n\n\t\tif ( language === \"de\" || language === \"nl\" || language === \"pl\" ) {\n\t\t\tsentenceParts = getPeriphrasticSentencePartsSplitOnStopwords( strippedSentence, language );\n\t\t} else {\n\t\t\tsentenceParts = getPeriphrasticSentencePartsDefault( strippedSentence, language );\n\t\t}\n\n\t\tlet passive = false;\n\t\tforEach( sentenceParts, function( sentencePart ) {\n\t\t\tsentencePart.setPassive( isPassiveSentencePart( sentencePart.getSentencePartText(), sentencePart.getAuxiliaries(), language ) );\n\t\t\tpassive = passive || sentencePart.isPassive();\n\t\t} );\n\t\tif ( passive ) {\n\t\t\tpassiveSentences.push( sentence.getSentenceText() );\n\t\t}\n\t} );\n\treturn {\n\t\tpassiveSentences,\n\t};\n};\n\n/**\n * Determines the number of passive sentences in the text.\n *\n * @param {Paper} paper The paper object to get the text from.\n * @returns {Object} The total number of sentences in the text and the found passive sentences.\n */\nexport default function( paper ) {\n\tconst text = paper.getText();\n\tconst locale = paper.getLocale();\n\tconst language = getLanguage( locale );\n\tconst sentences = getSentences( text )\n\t\t.map( function( sentence ) {\n\t\t\treturn new Sentence( sentence );\n\t\t} );\n\tconst totalNumberSentences = sentences.length;\n\n\tif ( morphologicalLanguages.includes( language ) ) {\n\t\treturn {\n\t\t\ttotal: totalNumberSentences,\n\t\t\tpassives: getMorphologicalPassives( sentences, language ).passiveSentences,\n\t\t};\n\t}\n\tif ( periphrasticLanguages.includes( language ) ) {\n\t\treturn {\n\t\t\ttotal: totalNumberSentences,\n\t\t\tpassives: getPeriphrasticPassives( sentences, language ).passiveSentences,\n\t\t};\n\t}\n}\n"]}