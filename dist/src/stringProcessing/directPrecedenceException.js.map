{"version":3,"sources":["../../../src/stringProcessing/directPrecedenceException.js"],"names":["getWordIndices","includesIndex","arrayToRegex","cannotDirectlyPrecedePassiveParticipleFrenchFactory","cannotDirectlyPrecedePassiveParticipleFrench","cannotDirectlyPrecedePassiveParticiple","cannotDirectlyPrecedePassiveParticipleEnglishFactory","cannotDirectlyPrecedePassiveParticipleEnglish","cannotDirectlyPrecedePassiveParticipleSpanishFactory","cannotDirectlyPrecedePassiveParticipleSpanish","cannotDirectlyPrecedePassiveParticipleItalianFactory","cannotDirectlyPrecedePassiveParticipleItalian","cannotDirectlyPrecedePassiveParticipleDutchFactory","cannotDirectlyPrecedePassiveParticipleDutch","cannotDirectlyPrecedePassiveParticiplePolishFactory","cannotDirectlyPrecedePassiveParticiplePolish","sentencePart","participleIndex","language","directPrecedenceExceptionRegex","directPrecedenceExceptionMatch"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,gEAA3B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;;AAEA,OAAOC,mDAAP,MAAgE,uCAAhE;AACA,MAAMC,+CAA+CD,sDAAsDE,sCAA3G;;AAEA,OAAOC,oDAAP,MAAiE,wCAAjE;AACA,MAAMC,gDAAgDD,uDAAuDD,sCAA7G;;AAEA,OAAOG,oDAAP,MAAiE,wCAAjE;AACA,MAAMC,gDAAgDD,uDAAuDH,sCAA7G;;AAEA,OAAOK,oDAAP,MAAiE,wCAAjE;AACA,MAAMC,gDAAgDD,uDAAuDL,sCAA7G;;AAEA,OAAOO,kDAAP,MAA+D,sCAA/D;AACA,MAAMC,8CAA8CD,qDAAqDP,sCAAzG;;AAEA,OAAOS,mDAAP,MAAgE,uCAAhE;AACA,MAAMC,+CAA+CD,sDAAsDT,sCAA3G;;AAGA;;;;;;;;;;;AAWA,eAAe,UAAUW,YAAV,EAAwBC,eAAxB,EAAyCC,QAAzC,EAAoD;AAClE,KAAIC,8BAAJ;AACA,SAASD,QAAT;AACC,OAAK,IAAL;AACCC,oCAAiCjB,aAAcE,4CAAd,CAAjC;AACA;AACD,OAAK,IAAL;AACCe,oCAAiCjB,aAAcO,6CAAd,CAAjC;AACA;AACD,OAAK,IAAL;AACCU,oCAAiCjB,aAAcS,6CAAd,CAAjC;AACA;AACD,OAAK,IAAL;AACCQ,oCAAiCjB,aAAcW,2CAAd,CAAjC;AACA;AACD,OAAK,IAAL;AACCM,oCAAiCjB,aAAca,4CAAd,CAAjC;AACA;AACD,OAAK,IAAL;AACA;AACCI,oCAAiCjB,aAAcK,6CAAd,CAAjC;AACA;AAnBF;AAqBA,OAAMa,iCAAiCpB,eAAgBgB,YAAhB,EAA8BG,8BAA9B,CAAvC;AACA,QAAOlB,cAAemB,8BAAf,EAA+CH,eAA/C,CAAP;AACA","file":"directPrecedenceException.js","sourcesContent":["import getWordIndices from \"../researches/passiveVoice/periphrastic/getIndicesWithRegex.js\";\nimport includesIndex from \"./includesIndex\";\nimport arrayToRegex from \"./createRegexFromArray.js\";\n\nimport cannotDirectlyPrecedePassiveParticipleFrenchFactory from \"../researches/french/functionWords.js\";\nconst cannotDirectlyPrecedePassiveParticipleFrench = cannotDirectlyPrecedePassiveParticipleFrenchFactory().cannotDirectlyPrecedePassiveParticiple;\n\nimport cannotDirectlyPrecedePassiveParticipleEnglishFactory from \"../researches/english/functionWords.js\";\nconst cannotDirectlyPrecedePassiveParticipleEnglish = cannotDirectlyPrecedePassiveParticipleEnglishFactory().cannotDirectlyPrecedePassiveParticiple;\n\nimport cannotDirectlyPrecedePassiveParticipleSpanishFactory from \"../researches/spanish/functionWords.js\";\nconst cannotDirectlyPrecedePassiveParticipleSpanish = cannotDirectlyPrecedePassiveParticipleSpanishFactory().cannotDirectlyPrecedePassiveParticiple;\n\nimport cannotDirectlyPrecedePassiveParticipleItalianFactory from \"../researches/italian/functionWords.js\";\nconst cannotDirectlyPrecedePassiveParticipleItalian = cannotDirectlyPrecedePassiveParticipleItalianFactory().cannotDirectlyPrecedePassiveParticiple;\n\nimport cannotDirectlyPrecedePassiveParticipleDutchFactory from \"../researches/dutch/functionWords.js\";\nconst cannotDirectlyPrecedePassiveParticipleDutch = cannotDirectlyPrecedePassiveParticipleDutchFactory().cannotDirectlyPrecedePassiveParticiple;\n\nimport cannotDirectlyPrecedePassiveParticiplePolishFactory from \"../researches/polish/functionWords.js\";\nconst cannotDirectlyPrecedePassiveParticiplePolish = cannotDirectlyPrecedePassiveParticiplePolishFactory().cannotDirectlyPrecedePassiveParticiple;\n\n\n/**\n * Checks whether the participle is directly preceded by a word from the direct precedence exception list.\n * If this is the case, the sentence part is not passive.\n *\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {number} participleIndex The index of the participle.\n * @param {string} language The language of the participle.\n *\n * @returns {boolean} Returns true if a word from the direct precedence exception list is directly preceding\n * the participle, otherwise returns false.\n */\nexport default function( sentencePart, participleIndex, language ) {\n\tlet directPrecedenceExceptionRegex;\n\tswitch ( language ) {\n\t\tcase \"fr\":\n\t\t\tdirectPrecedenceExceptionRegex = arrayToRegex( cannotDirectlyPrecedePassiveParticipleFrench );\n\t\t\tbreak;\n\t\tcase \"es\":\n\t\t\tdirectPrecedenceExceptionRegex = arrayToRegex( cannotDirectlyPrecedePassiveParticipleSpanish );\n\t\t\tbreak;\n\t\tcase \"it\":\n\t\t\tdirectPrecedenceExceptionRegex = arrayToRegex( cannotDirectlyPrecedePassiveParticipleItalian );\n\t\t\tbreak;\n\t\tcase \"nl\":\n\t\t\tdirectPrecedenceExceptionRegex = arrayToRegex( cannotDirectlyPrecedePassiveParticipleDutch );\n\t\t\tbreak;\n\t\tcase \"pl\":\n\t\t\tdirectPrecedenceExceptionRegex = arrayToRegex( cannotDirectlyPrecedePassiveParticiplePolish );\n\t\t\tbreak;\n\t\tcase \"en\":\n\t\tdefault:\n\t\t\tdirectPrecedenceExceptionRegex = arrayToRegex( cannotDirectlyPrecedePassiveParticipleEnglish );\n\t\t\tbreak;\n\t}\n\tconst directPrecedenceExceptionMatch = getWordIndices( sentencePart, directPrecedenceExceptionRegex );\n\treturn includesIndex( directPrecedenceExceptionMatch, participleIndex );\n}\n"]}