{"version":3,"sources":["../../../src/stringProcessing/getAlttagContent.js"],"names":["stripSpaces","regexAltTag","text","alt","matches","match","replace"],"mappings":"AAAA;;AAEA,OAAOA,WAAP,MAAwB,oCAAxB;;AAEA,IAAIC,cAAc,oBAAlB;;AAEA;;;;;;AAMA,eAAe,UAAUC,IAAV,EAAiB;AAC/B,KAAIC,MAAM,EAAV;;AAEA,KAAIC,UAAUF,KAAKG,KAAL,CAAYJ,WAAZ,CAAd;;AAEA,KAAKG,YAAY,IAAjB,EAAwB;AACvBD,QAAMH,YAAaI,QAAS,CAAT,CAAb,CAAN;;AAEAD,QAAMA,IAAIG,OAAJ,CAAa,SAAb,EAAwB,IAAxB,CAAN;AACAH,QAAMA,IAAIG,OAAJ,CAAa,SAAb,EAAwB,GAAxB,CAAN;AACA;AACD,QAAOH,GAAP;AACA","file":"getAlttagContent.js","sourcesContent":["/** @module stringProcessing/getAlttagContent */\n\nimport stripSpaces from \"../stringProcessing/stripSpaces.js\";\n\nvar regexAltTag = /alt=(['\"])(.*?)\\1/i;\n\n/**\n * Checks for an alttag in the image and returns its content\n *\n * @param {String} text Textstring to match alt\n * @returns {String} the contents of the alttag, empty if none is set.\n */\nexport default function( text ) {\n\tvar alt = \"\";\n\n\tvar matches = text.match( regexAltTag );\n\n\tif ( matches !== null ) {\n\t\talt = stripSpaces( matches[ 2 ] );\n\n\t\talt = alt.replace( /&quot;/g, \"\\\"\" );\n\t\talt = alt.replace( /&#039;/g, \"'\" );\n\t}\n\treturn alt;\n}\n"]}