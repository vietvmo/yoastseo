{"version":3,"sources":["../../../src/stringProcessing/createWordRegex.js"],"names":["isUndefined","replaceDiacritics","addWordBoundary","sanitizeString","escapeRegExp","memoize","string","extraBoundary","doReplaceDiacritics","RegExp"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,WAA5B;AACA,OAAOC,iBAAP,MAA8B,0CAA9B;AACA,OAAOC,eAAP,MAA4B,wCAA5B;AACA,OAAOC,cAAP,MAA2B,oCAA3B;;AAEA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,OAAT,QAAwB,WAAxB;;AAEA;;;;;;;;AAQA,eAAeA,QAAS,UAAUC,MAAV,EAAkBC,aAAlB,EAAiCC,mBAAjC,EAAuD;AAC9E,KAAKR,YAAaO,aAAb,CAAL,EAAoC;AACnCA,kBAAgB,EAAhB;AACA;;AAED,KAAKP,YAAaQ,mBAAb,KAAsCA,wBAAwB,IAAnE,EAA0E;AACzEF,WAASL,kBAAmBK,MAAnB,CAAT;AACA;;AAEDA,UAASH,eAAgBG,MAAhB,CAAT;AACAA,UAASF,aAAcE,MAAd,CAAT;AACAA,UAASJ,gBAAiBI,MAAjB,EAAyB,KAAzB,EAAgCC,aAAhC,CAAT;AACA,QAAO,IAAIE,MAAJ,CAAYH,MAAZ,EAAoB,IAApB,CAAP;AACA,CAbc,CAAf","file":"createWordRegex.js","sourcesContent":["/** @module stringProcessing/stringToRegex */\nimport { isUndefined } from \"lodash-es\";\nimport replaceDiacritics from \"../stringProcessing/replaceDiacritics.js\";\nimport addWordBoundary from \"../stringProcessing/addWordboundary.js\";\nimport sanitizeString from \"../stringProcessing/sanitizeString\";\n\nimport { escapeRegExp } from \"lodash-es\";\nimport { memoize } from \"lodash-es\";\n\n/**\n * Creates a regex from a string so it can be matched everywhere in the same way.\n *\n * @param {string} string The string to make a regex from.\n * @param {string} [extraBoundary=\"\"] A string that is used as extra boundary for the regex.\n * @param {boolean} [doReplaceDiacritics=true] If set to false, it doesn't replace diacritics. Defaults to true.\n * @returns {RegExp} regex The regex made from the keyword\n */\nexport default memoize( function( string, extraBoundary, doReplaceDiacritics ) {\n\tif ( isUndefined( extraBoundary ) ) {\n\t\textraBoundary = \"\";\n\t}\n\n\tif ( isUndefined( doReplaceDiacritics ) || doReplaceDiacritics === true ) {\n\t\tstring = replaceDiacritics( string );\n\t}\n\n\tstring = sanitizeString( string );\n\tstring = escapeRegExp( string );\n\tstring = addWordBoundary( string, false, extraBoundary );\n\treturn new RegExp( string, \"ig\" );\n} );\n"]}