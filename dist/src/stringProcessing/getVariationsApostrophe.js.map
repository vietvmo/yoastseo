{"version":3,"sources":["../../../src/stringProcessing/getVariationsApostrophe.js"],"names":["uniq","unique","flatten","getVariationsApostrophe","word","apostrophes","concat","map","apostropheOuter","apostropheInner","replace","getVariationsApostropheInArray","forms","form","filter","Boolean"],"mappings":"AAAA,SAASA,QAAQC,MAAjB,QAA+B,WAA/B;AACA,SAASC,OAAT,QAAwB,WAAxB;;AAEA;;;;;;;;AAQA,MAAMC,0BAA0B,UAAUC,IAAV,EAAiB;AAChD,QAAMC,cAAc,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,CAApB;;AAEA,SAAOJ,OAAQC,QAAS,GAAGI,MAAH,CAAWD,YAAYE,GAAZ,CAAiB,UAAUC,eAAV,EAA4B;AAC/E,WAAO,GAAGF,MAAH,CAAWD,YAAYE,GAAZ,CAAiB,UAAUE,eAAV,EAA4B;AAC9D,aAAOL,KAAKM,OAAL,CAAcF,eAAd,EAA+BC,eAA/B,CAAP;AACA,KAFiB,CAAX,CAAP;AAGA,GAJkC,CAAX,CAAT,CAAR,CAAP;AAKA,CARD;;AAUA;;;;;;;AAOA,MAAME,iCAAiC,UAAUC,KAAV,EAAkB;AACxD,SAAO,GAAGN,MAAH,CAAWM,MAAML,GAAN,CAAW,UAAUM,IAAV,EAAiB;AAC7C,WAASV,wBAAyBU,IAAzB,CAAT;AACA,GAFiB,CAAX,EAEDC,MAFC,CAEOC,OAFP,CAAP;AAGA,CAJD;;AAMA,SAASZ,uBAAT,EAAkCQ,8BAAlC","file":"getVariationsApostrophe.js","sourcesContent":["import { uniq as unique } from \"lodash-es\";\nimport { flatten } from \"lodash-es\";\n\n/**\n * Checks if the input word contains a normalized or a non-normalized apostrophe.\n * If so generates a complementary form (e.g., \"il'y a\" > \"il’a\")\n *\n * @param {string} word The word to check.\n *\n * @returns {Array} All possible variations of the input word.\n */\nconst getVariationsApostrophe = function( word ) {\n\tconst apostrophes = [ \"'\", \"‘\", \"’\", \"‛\", \"`\" ];\n\n\treturn unique( flatten( [].concat( apostrophes.map( function( apostropheOuter ) {\n\t\treturn [].concat( apostrophes.map( function( apostropheInner ) {\n\t\t\treturn word.replace( apostropheOuter, apostropheInner );\n\t\t} ) );\n\t} ) ) ) );\n};\n\n/**\n * Applies getVariationsApostrophe to an array of strings\n *\n * @param {Array} forms The word to check.\n *\n * @returns {Array} Original array with normalized and non-normalized apostrophes switched.\n */\nconst getVariationsApostropheInArray = function( forms ) {\n\treturn [].concat( forms.map( function( form ) {\n\t\treturn ( getVariationsApostrophe( form ) );\n\t} ) ).filter( Boolean );\n};\n\nexport { getVariationsApostrophe, getVariationsApostropheInArray };\n"]}