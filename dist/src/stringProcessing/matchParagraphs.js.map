{"version":3,"sources":["../../../src/stringProcessing/matchParagraphs.js"],"names":["map","flatMap","filter","getBlocks","getParagraphsInTags","text","paragraphs","regex","match","exec","push","paragraph","length","blocks","block","indexOf","split"],"mappings":"AAAA,SAASA,GAAT,QAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,SAASC,SAAT,QAA0B,iBAA1B;;AAEA;;;;;AAKA,IAAIC,sBAAsB,UAAUC,IAAV,EAAiB;AAC1C,KAAIC,aAAa,EAAjB;AACA;AACA,KAAIC,QAAQ,2BAAZ;AACA,KAAIC,KAAJ;;AAEA,QAAQ,CAAEA,QAAQD,MAAME,IAAN,CAAYJ,IAAZ,CAAV,MAAmC,IAA3C,EAAkD;AACjDC,aAAWI,IAAX,CAAiBF,KAAjB;AACA;;AAED;AACA,QAAOR,IAAKM,UAAL,EAAiB,UAAUK,SAAV,EAAsB;AAC7C,SAAOA,UAAW,CAAX,CAAP;AACA,EAFM,CAAP;AAGA,CAdD;;AAgBA;;;;;AAKA,eAAe,UAAUN,IAAV,EAAiB;AAC/B,KAAIC,aAAaF,oBAAqBC,IAArB,CAAjB;;AAEA,KAAKC,WAAWM,MAAX,GAAoB,CAAzB,EAA6B;AAC5B,SAAON,UAAP;AACA;;AAED;AACA,KAAIO,SAASV,UAAWE,IAAX,CAAb;;AAEAQ,UAASX,OAAQW,MAAR,EAAgB,UAAUC,KAAV,EAAkB;AAC1C;AACA,SAAO,MAAMA,MAAMC,OAAN,CAAe,IAAf,CAAb;AACA,EAHQ,CAAT;;AAKAT,cAAaL,QAASY,MAAT,EAAiB,UAAUC,KAAV,EAAkB;AAC/C,SAAOA,MAAME,KAAN,CAAa,MAAb,CAAP;AACA,EAFY,CAAb;;AAIA,KAAKV,WAAWM,MAAX,GAAoB,CAAzB,EAA6B;AAC5B,SAAON,UAAP;AACA;;AAED;AACA,QAAO,CAAED,IAAF,CAAP;AACA","file":"matchParagraphs.js","sourcesContent":["import { map } from \"lodash-es\";\nimport { flatMap } from \"lodash-es\";\nimport { filter } from \"lodash-es\";\n\nimport { getBlocks } from \"../helpers/html\";\n\n/**\n * Matches the paragraphs in <p>-tags and returns the text in them.\n * @param {string} text The text to match paragraph in.\n * @returns {array} An array containing all paragraphs texts.\n */\nvar getParagraphsInTags = function( text ) {\n\tvar paragraphs = [];\n\t// Matches everything between the <p> and </p> tags.\n\tvar regex = /<p(?:[^>]+)?>(.*?)<\\/p>/ig;\n\tvar match;\n\n\twhile ( ( match = regex.exec( text ) ) !== null ) {\n\t\tparagraphs.push( match );\n\t}\n\n\t// Returns only the text from within the paragraph tags.\n\treturn map( paragraphs, function( paragraph ) {\n\t\treturn paragraph[ 1 ];\n\t} );\n};\n\n/**\n * Returns an array with all paragraphs from the text.\n * @param {string} text The text to match paragraph in.\n * @returns {Array} The array containing all paragraphs from the text.\n */\nexport default function( text ) {\n\tvar paragraphs = getParagraphsInTags( text );\n\n\tif ( paragraphs.length > 0 ) {\n\t\treturn paragraphs;\n\t}\n\n\t// If no <p> tags found, split on double linebreaks.\n\tvar blocks = getBlocks( text );\n\n\tblocks = filter( blocks, function( block ) {\n\t\t// Match explicit paragraph tags, or if a block has no HTML tags.\n\t\treturn 0 !== block.indexOf( \"<h\" );\n\t} );\n\n\tparagraphs = flatMap( blocks, function( block ) {\n\t\treturn block.split( \"\\n\\n\" );\n\t} );\n\n\tif ( paragraphs.length > 0 ) {\n\t\treturn paragraphs;\n\t}\n\n\t// If no paragraphs are found, return an array containing the entire text.\n\treturn [ text ];\n}\n"]}