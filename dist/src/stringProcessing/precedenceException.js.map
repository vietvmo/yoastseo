{"version":3,"sources":["../../../src/stringProcessing/precedenceException.js"],"names":["getWordIndices","precedesIndex","arrayToRegex","cannotBeBetweenAuxiliaryAndParticipleFrenchFactory","cannotBeBetweenAuxiliaryAndParticipleFrench","cannotBeBetweenPassiveAuxiliaryAndParticiple","cannotBeBetweenAuxiliaryAndParticipleEnglishFactory","cannotBeBetweenAuxiliaryAndParticipleEnglish","cannotBeBetweenAuxiliaryAndParticipleSpanishFactory","cannotBeBetweenAuxiliaryAndParticipleSpanish","cannotBeBetweenAuxiliaryAndParticipleItalianFactory","cannotBeBetweenAuxiliaryAndParticipleItalian","sentencePart","participleIndex","language","precedenceExceptionRegex","precedenceExceptionMatch"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,gEAA3B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;;AAEA,OAAOC,kDAAP,MAA+D,uCAA/D;AACA,MAAMC,8CACLD,qDAAqDE,4CADtD;AAEA,OAAOC,mDAAP,MAAgE,wCAAhE;AACA,MAAMC,+CACLD,sDAAsDD,4CADvD;AAEA,OAAOG,mDAAP,MAAgE,wCAAhE;AACA,MAAMC,+CACLD,sDAAsDH,4CADvD;AAEA,OAAOK,mDAAP,MAAgE,wCAAhE;AACA,MAAMC,+CACLD,sDAAsDL,4CADvD;;AAGA;;;;;;;;;;;AAWA,eAAe,UAAUO,YAAV,EAAwBC,eAAxB,EAAyCC,QAAzC,EAAoD;AAClE,KAAIC,wBAAJ;AACA,SAASD,QAAT;AACC,OAAK,IAAL;AACCC,8BAA2Bb,aAAcE,2CAAd,CAA3B;AACA;AACD,OAAK,IAAL;AACCW,8BAA2Bb,aAAcO,4CAAd,CAA3B;AACA;AACD,OAAK,IAAL;AACCM,8BAA2Bb,aAAcS,4CAAd,CAA3B;AACA;AACD,OAAK,IAAL;AACA;AACCI,8BAA2Bb,aAAcK,4CAAd,CAA3B;AACA;AAbF;;AAgBA,OAAMS,2BAA2BhB,eAAgBY,YAAhB,EAA8BG,wBAA9B,CAAjC;AACA,QAAOd,cAAee,wBAAf,EAAyCH,eAAzC,CAAP;AACA","file":"precedenceException.js","sourcesContent":["import getWordIndices from \"../researches/passiveVoice/periphrastic/getIndicesWithRegex.js\";\nimport precedesIndex from \"./precedesIndex\";\nimport arrayToRegex from \"./createRegexFromArray.js\";\n\nimport cannotBeBetweenAuxiliaryAndParticipleFrenchFactory from \"../researches/french/functionWords.js\";\nconst cannotBeBetweenAuxiliaryAndParticipleFrench =\n\tcannotBeBetweenAuxiliaryAndParticipleFrenchFactory().cannotBeBetweenPassiveAuxiliaryAndParticiple;\nimport cannotBeBetweenAuxiliaryAndParticipleEnglishFactory from \"../researches/english/functionWords.js\";\nconst cannotBeBetweenAuxiliaryAndParticipleEnglish =\n\tcannotBeBetweenAuxiliaryAndParticipleEnglishFactory().cannotBeBetweenPassiveAuxiliaryAndParticiple;\nimport cannotBeBetweenAuxiliaryAndParticipleSpanishFactory from \"../researches/spanish/functionWords.js\";\nconst cannotBeBetweenAuxiliaryAndParticipleSpanish =\n\tcannotBeBetweenAuxiliaryAndParticipleSpanishFactory().cannotBeBetweenPassiveAuxiliaryAndParticiple;\nimport cannotBeBetweenAuxiliaryAndParticipleItalianFactory from \"../researches/italian/functionWords.js\";\nconst cannotBeBetweenAuxiliaryAndParticipleItalian =\n\tcannotBeBetweenAuxiliaryAndParticipleItalianFactory().cannotBeBetweenPassiveAuxiliaryAndParticiple;\n\n/**\n * Checks whether a word from the precedence exception list occurs anywhere in the sentence part before the participle.\n * If this is the case, the sentence part is not passive.\n *\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {number} participleIndex The index of the participle.\n * @param {string} language The language of the participle.\n *\n * @returns {boolean} Returns true if a word from the precedence exception list occurs anywhere in the\n * sentence part before the participle, otherwise returns false.\n */\nexport default function( sentencePart, participleIndex, language ) {\n\tlet precedenceExceptionRegex;\n\tswitch ( language ) {\n\t\tcase \"fr\":\n\t\t\tprecedenceExceptionRegex = arrayToRegex( cannotBeBetweenAuxiliaryAndParticipleFrench );\n\t\t\tbreak;\n\t\tcase \"es\":\n\t\t\tprecedenceExceptionRegex = arrayToRegex( cannotBeBetweenAuxiliaryAndParticipleSpanish );\n\t\t\tbreak;\n\t\tcase \"it\":\n\t\t\tprecedenceExceptionRegex = arrayToRegex( cannotBeBetweenAuxiliaryAndParticipleItalian );\n\t\t\tbreak;\n\t\tcase \"en\":\n\t\tdefault:\n\t\t\tprecedenceExceptionRegex = arrayToRegex( cannotBeBetweenAuxiliaryAndParticipleEnglish );\n\t\t\tbreak;\n\t}\n\n\tconst precedenceExceptionMatch = getWordIndices( sentencePart, precedenceExceptionRegex );\n\treturn precedesIndex( precedenceExceptionMatch, participleIndex );\n}\n"]}