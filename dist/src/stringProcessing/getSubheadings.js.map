{"version":3,"sources":["../../../src/stringProcessing/getSubheadings.js"],"names":["getSubheadings","text","subheadings","regex","match","exec","push","getSubheadingsTopLevel","getSubheadingContents","map","subheading","getSubheadingContentsTopLevel"],"mappings":"AAAA;;;;;;;;AAQA,SAASA,cAAT,CAAyBC,IAAzB,EAAgC;AAC/B,OAAMC,cAAc,EAApB;AACA,OAAMC,QAAQ,oCAAd;AACA,KAAIC,KAAJ;;AAEA,QAAQ,CAAEA,QAAQD,MAAME,IAAN,CAAYJ,IAAZ,CAAV,MAAmC,IAA3C,EAAkD;AACjDC,cAAYI,IAAZ,CAAkBF,KAAlB;AACA;;AAED,QAAOF,WAAP;AACA;;AAED;;;;;;;;AAQA,SAASK,sBAAT,CAAiCN,IAAjC,EAAwC;AACvC,OAAMC,cAAc,EAApB;AACA,OAAMC,QAAQ,oCAAd;AACA,KAAIC,KAAJ;;AAEA,QAAQ,CAAEA,QAAQD,MAAME,IAAN,CAAYJ,IAAZ,CAAV,MAAmC,IAA3C,EAAkD;AACjDC,cAAYI,IAAZ,CAAkBF,KAAlB;AACA;;AAED,QAAOF,WAAP;AACA;;AAED;;;;;;;AAOA,SAASM,qBAAT,CAAgCP,IAAhC,EAAuC;AACtC,OAAMC,cAAcF,eAAgBC,IAAhB,CAApB;;AAEA,QAAOC,YAAYO,GAAZ,CAAiBC,cAAcA,WAAY,CAAZ,CAA/B,CAAP;AACA;;AAED;;;;;;;AAOA,SAASC,6BAAT,CAAwCV,IAAxC,EAA+C;AAC9C,OAAMC,cAAcK,uBAAwBN,IAAxB,CAApB;;AAEA;AACA,QAAOC,YAAYO,GAAZ,CAAiBC,cAAcA,WAAY,CAAZ,CAA/B,CAAP;AACA;;AAED,SACCV,cADD,EAECO,sBAFD,EAGCC,qBAHD,EAICG,6BAJD;;AAOA,eAAe;AACdX,iBAAgBA,cADF;AAEdO,yBAAwBA,sBAFV;AAGdC,wBAAuBA,qBAHT;AAIdG,gCAA+BA;AAJjB,CAAf","file":"getSubheadings.js","sourcesContent":["/**\n * Gets all subheadings from the text and returns these in an array.\n *\n * @param {string} text The text to return the headings from.\n *\n * @returns {Array<string[]>} Matches of subheadings in the text, first key is everything including tags,\n *                            second is the heading level, third is the content of the subheading.\n */\nfunction getSubheadings( text ) {\n\tconst subheadings = [];\n\tconst regex = /<h([1-6])(?:[^>]+)?>(.*?)<\\/h\\1>/ig;\n\tlet match;\n\n\twhile ( ( match = regex.exec( text ) ) !== null ) {\n\t\tsubheadings.push( match );\n\t}\n\n\treturn subheadings;\n}\n\n/**\n * Gets all the level 2 and 3 subheadings from the text and returns these in an array.\n *\n * @param {string} text The text to return the headings from.\n *\n * @returns {Array<string[]>} Matches of subheadings in the text, first key is everything including tags,\n *                            second is the heading level, third is the content of the subheading.\n */\nfunction getSubheadingsTopLevel( text ) {\n\tconst subheadings = [];\n\tconst regex = /<h([2-3])(?:[^>]+)?>(.*?)<\\/h\\1>/ig;\n\tlet match;\n\n\twhile ( ( match = regex.exec( text ) ) !== null ) {\n\t\tsubheadings.push( match );\n\t}\n\n\treturn subheadings;\n}\n\n/**\n * Gets the content of subheadings in the text.\n *\n * @param {string} text The text to get the subheading contents from.\n *\n * @returns {string[]} A list of all the subheadings with their content.\n */\nfunction getSubheadingContents( text ) {\n\tconst subheadings = getSubheadings( text );\n\n\treturn subheadings.map( subheading => subheading[ 0 ] );\n}\n\n/**\n * Gets the content of subheadings h2 and h3 in the text.\n *\n * @param {string} text The text to get the subheading contents from.\n *\n * @returns {string[]} A list of all the subheadings with their content.\n */\nfunction getSubheadingContentsTopLevel( text ) {\n\tconst subheadings = getSubheadingsTopLevel( text );\n\n\t// Only return the entire string matched, not the rest of the outputs of the regex.exec function.\n\treturn subheadings.map( subheading => subheading[ 0 ] );\n}\n\nexport {\n\tgetSubheadings,\n\tgetSubheadingsTopLevel,\n\tgetSubheadingContents,\n\tgetSubheadingContentsTopLevel,\n};\n\nexport default {\n\tgetSubheadings: getSubheadings,\n\tgetSubheadingsTopLevel: getSubheadingsTopLevel,\n\tgetSubheadingContents: getSubheadingContents,\n\tgetSubheadingContentsTopLevel: getSubheadingContentsTopLevel,\n};\n"]}