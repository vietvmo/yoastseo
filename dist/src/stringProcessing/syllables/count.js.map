{"version":3,"sources":["../../../../src/stringProcessing/syllables/count.js"],"names":["syllableMatchers","getWords","forEach","filter","find","isUndefined","map","sum","memoize","flatMap","SyllableCountIterator","DeviationFragment","countVowelGroups","word","locale","numberOfSyllables","vowelRegex","RegExp","vowels","foundVowels","split","filteredWords","vowel","length","countVowelDeviations","syllableCountIterator","countSyllables","countFullWordDeviations","fullWordDeviations","deviations","words","full","deviation","fullWordDeviation","syllables","createDeviationFragments","syllableConfig","deviationFragments","fragments","fragmentLocation","fragment","location","createDeviationFragmentsMemoized","countPartialWordDeviations","remainingParts","syllableCount","deviationFragment","occursIn","removeFrom","getSyllables","countUsingVowels","countSyllablesInWord","fullWordExclusion","partialExclusions","countSyllablesInText","text","toLocaleLowerCase","syllableCounts"],"mappings":"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","file":"count.js","sourcesContent":["/** @module stringProcessing/countSyllables */\n\nimport syllableMatchers from \"../../config/syllables.js\";\n\nimport getWords from \"../getWords.js\";\n\nimport { forEach } from \"lodash-es\";\nimport { filter } from \"lodash-es\";\nimport { find } from \"lodash-es\";\nimport { isUndefined } from \"lodash-es\";\nimport { map } from \"lodash-es\";\nimport { sum } from \"lodash-es\";\nimport { memoize } from \"lodash-es\";\nimport { flatMap } from \"lodash-es\";\n\nimport SyllableCountIterator from \"../../helpers/syllableCountIterator.js\";\nimport DeviationFragment from \"./DeviationFragment\";\n\n/**\n * Counts vowel groups inside a word.\n *\n * @param {string} word A text with words to count syllables.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {number} the syllable count.\n */\nvar countVowelGroups = function( word, locale ) {\n\tvar numberOfSyllables = 0;\n\tvar vowelRegex = new RegExp( \"[^\" + syllableMatchers( locale ).vowels + \"]\", \"ig\" );\n\tvar foundVowels = word.split( vowelRegex );\n\tvar filteredWords = filter( foundVowels, function( vowel ) {\n\t\treturn vowel !== \"\";\n\t} );\n\tnumberOfSyllables += filteredWords.length;\n\n\treturn numberOfSyllables;\n};\n\n/**\n * Counts the syllables using vowel exclusions. These are used for groups of vowels that are more or less\n * than 1 syllable.\n *\n * @param {String} word The word to count syllables of.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {number} The number of syllables found in the given word.\n */\nvar countVowelDeviations = function( word, locale ) {\n\tvar syllableCountIterator = new SyllableCountIterator( syllableMatchers( locale ) );\n\treturn syllableCountIterator.countSyllables( word );\n};\n\n/**\n * Returns the number of syllables for the word if it is in the list of full word deviations.\n *\n * @param {String} word The word to retrieve the syllables for.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {number} The number of syllables found.\n */\nvar countFullWordDeviations = function( word, locale ) {\n\tvar fullWordDeviations = syllableMatchers( locale ).deviations.words.full;\n\n\tvar deviation = find( fullWordDeviations, function( fullWordDeviation ) {\n\t\treturn fullWordDeviation.word === word;\n\t} );\n\n\tif ( ! isUndefined( deviation ) ) {\n\t\treturn deviation.syllables;\n\t}\n\n\treturn 0;\n};\n\n/**\n * Creates an array of deviation fragments for a certain locale.\n *\n * @param {Object} syllableConfig Syllable config for a certain locale.\n * @returns {DeviationFragment[]} A list of deviation fragments\n */\nfunction createDeviationFragments( syllableConfig ) {\n\tvar deviationFragments = [];\n\n\tvar deviations = syllableConfig.deviations;\n\n\tif ( ! isUndefined( deviations.words ) && ! isUndefined( deviations.words.fragments ) ) {\n\t\tdeviationFragments = flatMap( deviations.words.fragments, function( fragments, fragmentLocation ) {\n\t\t\treturn map( fragments, function( fragment ) {\n\t\t\t\tfragment.location = fragmentLocation;\n\n\t\t\t\treturn new DeviationFragment( fragment );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn deviationFragments;\n}\n\nvar createDeviationFragmentsMemoized = memoize( createDeviationFragments );\n\n/**\n * Counts syllables in partial exclusions. If these are found, returns the number of syllables  found, and the modified word.\n * The word is modified so the excluded part isn't counted by the normal syllable counter.\n *\n * @param {String} word The word to count syllables of.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {object} The number of syllables found and the modified word.\n */\nvar countPartialWordDeviations = function( word, locale ) {\n\tvar deviationFragments = createDeviationFragmentsMemoized( syllableMatchers( locale ) );\n\tvar remainingParts = word;\n\tvar syllableCount = 0;\n\n\tforEach( deviationFragments, function( deviationFragment ) {\n\t\tif ( deviationFragment.occursIn( remainingParts ) ) {\n\t\t\tremainingParts = deviationFragment.removeFrom( remainingParts );\n\t\t\tsyllableCount += deviationFragment.getSyllables();\n\t\t}\n\t} );\n\n\treturn { word: remainingParts, syllableCount: syllableCount };\n};\n\n/**\n * Count the number of syllables in a word, using vowels and exceptions.\n *\n * @param {String} word The word to count the number of syllables of.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {number} The number of syllables found in a word.\n */\nvar countUsingVowels = function( word, locale ) {\n\tvar syllableCount = 0;\n\n\tsyllableCount += countVowelGroups( word, locale );\n\tsyllableCount += countVowelDeviations( word, locale );\n\n\treturn syllableCount;\n};\n\n/**\n * Counts the number of syllables in a word.\n *\n * @param {string} word The word to count syllables of.\n * @param {string} locale The locale of the word.\n * @returns {number} The syllable count for the word.\n */\nvar countSyllablesInWord = function( word, locale ) {\n\tvar syllableCount = 0;\n\n\tvar fullWordExclusion = countFullWordDeviations( word, locale );\n\tif ( fullWordExclusion !== 0 ) {\n\t\treturn fullWordExclusion;\n\t}\n\n\tvar partialExclusions = countPartialWordDeviations( word, locale );\n\tword = partialExclusions.word;\n\tsyllableCount += partialExclusions.syllableCount;\n\tsyllableCount += countUsingVowels( word, locale );\n\n\treturn syllableCount;\n};\n\n/**\n * Counts the number of syllables in a text per word based on vowels.\n * Uses exclusion words for words that cannot be matched with vowel matching.\n *\n * @param {String} text The text to count the syllables of.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {int} The total number of syllables found in the text.\n */\nvar countSyllablesInText = function( text, locale ) {\n\ttext = text.toLocaleLowerCase();\n\tvar words = getWords( text );\n\n\tvar syllableCounts = map( words,  function( word ) {\n\t\treturn countSyllablesInWord( word, locale );\n\t} );\n\n\treturn sum( syllableCounts );\n};\n\nexport default countSyllablesInText;\n"]}