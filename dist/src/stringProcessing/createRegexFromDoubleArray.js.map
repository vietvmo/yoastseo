{"version":3,"sources":["../../../src/stringProcessing/createRegexFromDoubleArray.js"],"names":["addWordBoundary","wordCombinationToRegexString","array","map","word","join","wordCombination","regexString","RegExp"],"mappings":"AAAA;;AAEA,OAAOA,eAAP,MAA4B,wCAA5B;;AAEA;;;;;AAKA,IAAIC,+BAA+B,UAAUC,KAAV,EAAkB;AACpDA,SAAQA,MAAMC,GAAN,CAAW,UAAUC,IAAV,EAAiB;AACnC,SAAOJ,gBAAiBI,IAAjB,CAAP;AACA,EAFO,CAAR;AAGA,QAAOF,MAAMG,IAAN,CAAY,OAAZ,CAAP;AACA,CALD;;AAOA;;;;;AAKA,eAAe,UAAUH,KAAV,EAAkB;AAChCA,SAAQA,MAAMC,GAAN,CAAW,UAAUG,eAAV,EAA4B;AAC9C,SAAOL,6BAA8BK,eAA9B,CAAP;AACA,EAFO,CAAR;AAGA,KAAIC,cAAc,MAAML,MAAMG,IAAN,CAAY,KAAZ,CAAN,GAA4B,GAA9C;AACA,QAAO,IAAIG,MAAJ,CAAYD,WAAZ,EAAyB,IAAzB,CAAP;AACA","file":"createRegexFromDoubleArray.js","sourcesContent":["/** @module stringProcessing/createRegexFromDoubleArray */\n\nimport addWordBoundary from \"../stringProcessing/addWordboundary.js\";\n\n/**\n * Creates a regex string of combined strings from the input array.\n * @param {array} array The array containing the various parts of a transition word combination.\n * @returns {array} The array with replaced entries.\n */\nvar wordCombinationToRegexString = function( array ) {\n\tarray = array.map( function( word ) {\n\t\treturn addWordBoundary( word );\n\t} );\n\treturn array.join( \"(.*?)\" );\n};\n\n/**\n * Creates a regex of combined strings from the input array, containing arrays with two entries.\n * @param {array} array The array containing arrays.\n * @returns {RegExp} The regex created from the array.\n */\nexport default function( array ) {\n\tarray = array.map( function( wordCombination ) {\n\t\treturn wordCombinationToRegexString( wordCombination );\n\t} );\n\tvar regexString = \"(\" + array.join( \")|(\" ) + \")\";\n\treturn new RegExp( regexString, \"ig\" );\n}\n"]}